/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ItemTypeDto;
import org.openapitools.client.model.UpgradeEffectsInnerDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpgradeDto
 */
@JsonPropertyOrder({
  UpgradeDto.JSON_PROPERTY_EFFECTS,
  UpgradeDto.JSON_PROPERTY_ID,
  UpgradeDto.JSON_PROPERTY_NAME,
  UpgradeDto.JSON_PROPERTY_SLOTS,
  UpgradeDto.JSON_PROPERTY_TARGET,
  UpgradeDto.JSON_PROPERTY_VENDOR_PRICE
})
@JsonTypeName("Upgrade")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class UpgradeDto {
  public static final String JSON_PROPERTY_EFFECTS = "effects";
  private List<UpgradeEffectsInnerDto> effects = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SLOTS = "slots";
  private Integer slots;

  public static final String JSON_PROPERTY_TARGET = "target";
  private ItemTypeDto target;

  public static final String JSON_PROPERTY_VENDOR_PRICE = "vendorPrice";
  private Integer vendorPrice;

  public UpgradeDto() {
  }

  public UpgradeDto effects(List<UpgradeEffectsInnerDto> effects) {
    
    this.effects = effects;
    return this;
  }

  public UpgradeDto addEffectsItem(UpgradeEffectsInnerDto effectsItem) {
    if (this.effects == null) {
      this.effects = new ArrayList<>();
    }
    this.effects.add(effectsItem);
    return this;
  }

   /**
   * Get effects
   * @return effects
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EFFECTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UpgradeEffectsInnerDto> getEffects() {
    return effects;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEffects(List<UpgradeEffectsInnerDto> effects) {
    this.effects = effects;
  }


  public UpgradeDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public UpgradeDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public UpgradeDto slots(Integer slots) {
    
    this.slots = slots;
    return this;
  }

   /**
   * Get slots
   * @return slots
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SLOTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSlots() {
    return slots;
  }


  @JsonProperty(JSON_PROPERTY_SLOTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlots(Integer slots) {
    this.slots = slots;
  }


  public UpgradeDto target(ItemTypeDto target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ItemTypeDto getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTarget(ItemTypeDto target) {
    this.target = target;
  }


  public UpgradeDto vendorPrice(Integer vendorPrice) {
    
    this.vendorPrice = vendorPrice;
    return this;
  }

   /**
   * Get vendorPrice
   * @return vendorPrice
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VENDOR_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVendorPrice() {
    return vendorPrice;
  }


  @JsonProperty(JSON_PROPERTY_VENDOR_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVendorPrice(Integer vendorPrice) {
    this.vendorPrice = vendorPrice;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeDto upgrade = (UpgradeDto) o;
    return Objects.equals(this.effects, upgrade.effects) &&
        Objects.equals(this.id, upgrade.id) &&
        Objects.equals(this.name, upgrade.name) &&
        Objects.equals(this.slots, upgrade.slots) &&
        Objects.equals(this.target, upgrade.target) &&
        Objects.equals(this.vendorPrice, upgrade.vendorPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effects, id, name, slots, target, vendorPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeDto {\n");
    sb.append("    effects: ").append(toIndentedString(effects)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    vendorPrice: ").append(toIndentedString(vendorPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

