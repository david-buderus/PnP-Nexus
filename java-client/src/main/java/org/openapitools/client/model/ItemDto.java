/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/**
 * ItemDto
 */
@JsonPropertyOrder({
    ItemDto.JSON_PROPERTY_DESCRIPTION,
    ItemDto.JSON_PROPERTY_EFFECT,
    ItemDto.JSON_PROPERTY_ID,
    ItemDto.JSON_PROPERTY_MAXIMUM_STACK_SIZE,
    ItemDto.JSON_PROPERTY_MINIMUM_STACK_SIZE,
    ItemDto.JSON_PROPERTY_NAME,
    ItemDto.JSON_PROPERTY_NOTE,
    ItemDto.JSON_PROPERTY_RARITY,
    ItemDto.JSON_PROPERTY_REQUIREMENT,
    ItemDto.JSON_PROPERTY_SUBTYPE,
    ItemDto.JSON_PROPERTY_TIER,
    ItemDto.JSON_PROPERTY_TYPE,
    ItemDto.JSON_PROPERTY_VENDOR_PRICE
})
@JsonTypeName("Item")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class ItemDto {

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_EFFECT = "effect";
    private String effect;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_MAXIMUM_STACK_SIZE = "maximumStackSize";
    private Integer maximumStackSize;

    public static final String JSON_PROPERTY_MINIMUM_STACK_SIZE = "minimumStackSize";
    private Integer minimumStackSize;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_NOTE = "note";
    private String note;

    /**
     * Gets or Sets rarity
     */
    public enum RarityEnum {
        UNKNOWN("UNKNOWN"),

        COMMON("COMMON"),

        RARE("RARE"),

        EPIC("EPIC"),

        LEGENDARY("LEGENDARY"),

        GODLIKE("GODLIKE");

        private String value;

        RarityEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RarityEnum fromValue(String value) {
            for (RarityEnum b : RarityEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_RARITY = "rarity";
    private RarityEnum rarity;

    public static final String JSON_PROPERTY_REQUIREMENT = "requirement";
    private String requirement;

    public static final String JSON_PROPERTY_SUBTYPE = "subtype";
    private ItemTypeDto subtype;

    public static final String JSON_PROPERTY_TIER = "tier";
    private Integer tier;

    public static final String JSON_PROPERTY_TYPE = "type";
    private ItemTypeDto type;

    public static final String JSON_PROPERTY_VENDOR_PRICE = "vendorPrice";
    private Integer vendorPrice;

    public ItemDto() {
    }

    public ItemDto description(String description) {

        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getDescription() {
        return description;
    }


    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDescription(String description) {
        this.description = description;
    }


    public ItemDto effect(String effect) {

        this.effect = effect;
        return this;
    }

    /**
     * Get effect
     *
     * @return effect
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_EFFECT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getEffect() {
        return effect;
    }


    @JsonProperty(JSON_PROPERTY_EFFECT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setEffect(String effect) {
        this.effect = effect;
    }


    public ItemDto id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getId() {
        return id;
    }


    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }


    public ItemDto maximumStackSize(Integer maximumStackSize) {

        this.maximumStackSize = maximumStackSize;
        return this;
    }

    /**
     * Get maximumStackSize
     *
     * @return maximumStackSize
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MAXIMUM_STACK_SIZE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getMaximumStackSize() {
        return maximumStackSize;
    }


    @JsonProperty(JSON_PROPERTY_MAXIMUM_STACK_SIZE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMaximumStackSize(Integer maximumStackSize) {
        this.maximumStackSize = maximumStackSize;
    }


    public ItemDto minimumStackSize(Integer minimumStackSize) {

        this.minimumStackSize = minimumStackSize;
        return this;
    }

    /**
     * Get minimumStackSize
     *
     * @return minimumStackSize
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_MINIMUM_STACK_SIZE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getMinimumStackSize() {
        return minimumStackSize;
    }


    @JsonProperty(JSON_PROPERTY_MINIMUM_STACK_SIZE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMinimumStackSize(Integer minimumStackSize) {
        this.minimumStackSize = minimumStackSize;
    }


    public ItemDto name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName() {
        return name;
    }


    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }


    public ItemDto note(String note) {

        this.note = note;
        return this;
    }

    /**
     * Get note
     *
     * @return note
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getNote() {
        return note;
    }


    @JsonProperty(JSON_PROPERTY_NOTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setNote(String note) {
        this.note = note;
    }


    public ItemDto rarity(RarityEnum rarity) {

        this.rarity = rarity;
        return this;
    }

    /**
     * Get rarity
     *
     * @return rarity
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RARITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public RarityEnum getRarity() {
        return rarity;
    }


    @JsonProperty(JSON_PROPERTY_RARITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRarity(RarityEnum rarity) {
        this.rarity = rarity;
    }


    public ItemDto requirement(String requirement) {

        this.requirement = requirement;
        return this;
    }

    /**
     * Get requirement
     *
     * @return requirement
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REQUIREMENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getRequirement() {
        return requirement;
    }


    @JsonProperty(JSON_PROPERTY_REQUIREMENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequirement(String requirement) {
        this.requirement = requirement;
    }


    public ItemDto subtype(ItemTypeDto subtype) {

        this.subtype = subtype;
        return this;
    }

    /**
     * Get subtype
     *
     * @return subtype
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SUBTYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ItemTypeDto getSubtype() {
        return subtype;
    }


    @JsonProperty(JSON_PROPERTY_SUBTYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSubtype(ItemTypeDto subtype) {
        this.subtype = subtype;
    }


    public ItemDto tier(Integer tier) {

        this.tier = tier;
        return this;
    }

    /**
     * Get tier
     *
     * @return tier
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TIER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getTier() {
        return tier;
    }


    @JsonProperty(JSON_PROPERTY_TIER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTier(Integer tier) {
        this.tier = tier;
    }


    public ItemDto type(ItemTypeDto type) {

        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ItemTypeDto getType() {
        return type;
    }


    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(ItemTypeDto type) {
        this.type = type;
    }


    public ItemDto vendorPrice(Integer vendorPrice) {

        this.vendorPrice = vendorPrice;
        return this;
    }

    /**
     * Get vendorPrice
     *
     * @return vendorPrice
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_VENDOR_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getVendorPrice() {
        return vendorPrice;
    }


    @JsonProperty(JSON_PROPERTY_VENDOR_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVendorPrice(Integer vendorPrice) {
        this.vendorPrice = vendorPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ItemDto item = (ItemDto) o;
        return Objects.equals(this.description, item.description) &&
            Objects.equals(this.effect, item.effect) &&
            Objects.equals(this.id, item.id) &&
            Objects.equals(this.maximumStackSize, item.maximumStackSize) &&
            Objects.equals(this.minimumStackSize, item.minimumStackSize) &&
            Objects.equals(this.name, item.name) &&
            Objects.equals(this.note, item.note) &&
            Objects.equals(this.rarity, item.rarity) &&
            Objects.equals(this.requirement, item.requirement) &&
            Objects.equals(this.subtype, item.subtype) &&
            Objects.equals(this.tier, item.tier) &&
            Objects.equals(this.type, item.type) &&
            Objects.equals(this.vendorPrice, item.vendorPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(description, effect, id, maximumStackSize, minimumStackSize, name, note, rarity,
            requirement, subtype, tier, type, vendorPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ItemDto {\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    maximumStackSize: ").append(toIndentedString(maximumStackSize)).append("\n");
        sb.append("    minimumStackSize: ").append(toIndentedString(minimumStackSize)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    note: ").append(toIndentedString(note)).append("\n");
        sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
        sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
        sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
        sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    vendorPrice: ").append(toIndentedString(vendorPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

