/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CharacterResourceRecipeEntryDto;
import org.openapitools.client.model.GetAllItems200ResponseInnerDto;
import org.openapitools.client.model.ItemRecipeEntryDto;
import org.openapitools.client.model.MaterialDto;
import org.openapitools.client.model.MaterialRecipeEntryDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CraftingRecipeMaterialsInnerDto
 */
@JsonPropertyOrder({
  CraftingRecipeMaterialsInnerDto.JSON_PROPERTY_AMOUNT_OF_REQUIRED_UNITS,
  CraftingRecipeMaterialsInnerDto.JSON_PROPERTY_RESOURCE,
  CraftingRecipeMaterialsInnerDto.JSON_PROPERTY_ITEM,
  CraftingRecipeMaterialsInnerDto.JSON_PROPERTY_MATERIAL
})
@JsonTypeName("CraftingRecipe_materials_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class CraftingRecipeMaterialsInnerDto {
  public static final String JSON_PROPERTY_AMOUNT_OF_REQUIRED_UNITS = "amountOfRequiredUnits";
  private Float amountOfRequiredUnits;

  /**
   * Gets or Sets resource
   */
  public enum ResourceEnum {
    HEALTH("HEALTH"),
    
    MANA("MANA"),
    
    MENTAL_HEALTH("MENTAL_HEALTH");

    private String value;

    ResourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceEnum fromValue(String value) {
      for (ResourceEnum b : ResourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RESOURCE = "resource";
  private ResourceEnum resource;

  public static final String JSON_PROPERTY_ITEM = "item";
  private GetAllItems200ResponseInnerDto item;

  public static final String JSON_PROPERTY_MATERIAL = "material";
  private MaterialDto material;

  public CraftingRecipeMaterialsInnerDto() {
  }

  public CraftingRecipeMaterialsInnerDto amountOfRequiredUnits(Float amountOfRequiredUnits) {
    
    this.amountOfRequiredUnits = amountOfRequiredUnits;
    return this;
  }

   /**
   * Get amountOfRequiredUnits
   * @return amountOfRequiredUnits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_OF_REQUIRED_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getAmountOfRequiredUnits() {
    return amountOfRequiredUnits;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_OF_REQUIRED_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountOfRequiredUnits(Float amountOfRequiredUnits) {
    this.amountOfRequiredUnits = amountOfRequiredUnits;
  }


  public CraftingRecipeMaterialsInnerDto resource(ResourceEnum resource) {
    
    this.resource = resource;
    return this;
  }

   /**
   * Get resource
   * @return resource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResourceEnum getResource() {
    return resource;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResource(ResourceEnum resource) {
    this.resource = resource;
  }


  public CraftingRecipeMaterialsInnerDto item(GetAllItems200ResponseInnerDto item) {
    
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetAllItems200ResponseInnerDto getItem() {
    return item;
  }


  @JsonProperty(JSON_PROPERTY_ITEM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItem(GetAllItems200ResponseInnerDto item) {
    this.item = item;
  }


  public CraftingRecipeMaterialsInnerDto material(MaterialDto material) {
    
    this.material = material;
    return this;
  }

   /**
   * Get material
   * @return material
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MATERIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MaterialDto getMaterial() {
    return material;
  }


  @JsonProperty(JSON_PROPERTY_MATERIAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaterial(MaterialDto material) {
    this.material = material;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CraftingRecipeMaterialsInnerDto craftingRecipeMaterialsInner = (CraftingRecipeMaterialsInnerDto) o;
    return Objects.equals(this.amountOfRequiredUnits, craftingRecipeMaterialsInner.amountOfRequiredUnits) &&
        Objects.equals(this.resource, craftingRecipeMaterialsInner.resource) &&
        Objects.equals(this.item, craftingRecipeMaterialsInner.item) &&
        Objects.equals(this.material, craftingRecipeMaterialsInner.material);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountOfRequiredUnits, resource, item, material);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CraftingRecipeMaterialsInnerDto {\n");
    sb.append("    amountOfRequiredUnits: ").append(toIndentedString(amountOfRequiredUnits)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    material: ").append(toIndentedString(material)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

