/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CraftingRecipeMaterialsInnerDto;
import org.openapitools.client.model.UpgradeDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpgradeRecipeDto
 */
@JsonPropertyOrder({
  UpgradeRecipeDto.JSON_PROPERTY_ID,
  UpgradeRecipeDto.JSON_PROPERTY_MATERIALS,
  UpgradeRecipeDto.JSON_PROPERTY_REQUIRED_UPGRADES,
  UpgradeRecipeDto.JSON_PROPERTY_REQUIREMENT,
  UpgradeRecipeDto.JSON_PROPERTY_UPGRADE
})
@JsonTypeName("UpgradeRecipe")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class UpgradeRecipeDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_MATERIALS = "materials";
  private List<CraftingRecipeMaterialsInnerDto> materials = new ArrayList<>();

  public static final String JSON_PROPERTY_REQUIRED_UPGRADES = "requiredUpgrades";
  private List<UpgradeDto> requiredUpgrades = new ArrayList<>();

  public static final String JSON_PROPERTY_REQUIREMENT = "requirement";
  private String requirement;

  public static final String JSON_PROPERTY_UPGRADE = "upgrade";
  private UpgradeDto upgrade;

  public UpgradeRecipeDto() {
  }

  public UpgradeRecipeDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public UpgradeRecipeDto materials(List<CraftingRecipeMaterialsInnerDto> materials) {
    
    this.materials = materials;
    return this;
  }

  public UpgradeRecipeDto addMaterialsItem(CraftingRecipeMaterialsInnerDto materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

   /**
   * Get materials
   * @return materials
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CraftingRecipeMaterialsInnerDto> getMaterials() {
    return materials;
  }


  @JsonProperty(JSON_PROPERTY_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaterials(List<CraftingRecipeMaterialsInnerDto> materials) {
    this.materials = materials;
  }


  public UpgradeRecipeDto requiredUpgrades(List<UpgradeDto> requiredUpgrades) {
    
    this.requiredUpgrades = requiredUpgrades;
    return this;
  }

  public UpgradeRecipeDto addRequiredUpgradesItem(UpgradeDto requiredUpgradesItem) {
    if (this.requiredUpgrades == null) {
      this.requiredUpgrades = new ArrayList<>();
    }
    this.requiredUpgrades.add(requiredUpgradesItem);
    return this;
  }

   /**
   * Get requiredUpgrades
   * @return requiredUpgrades
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIRED_UPGRADES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UpgradeDto> getRequiredUpgrades() {
    return requiredUpgrades;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED_UPGRADES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequiredUpgrades(List<UpgradeDto> requiredUpgrades) {
    this.requiredUpgrades = requiredUpgrades;
  }


  public UpgradeRecipeDto requirement(String requirement) {
    
    this.requirement = requirement;
    return this;
  }

   /**
   * Get requirement
   * @return requirement
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRequirement() {
    return requirement;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequirement(String requirement) {
    this.requirement = requirement;
  }


  public UpgradeRecipeDto upgrade(UpgradeDto upgrade) {
    
    this.upgrade = upgrade;
    return this;
  }

   /**
   * Get upgrade
   * @return upgrade
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPGRADE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UpgradeDto getUpgrade() {
    return upgrade;
  }


  @JsonProperty(JSON_PROPERTY_UPGRADE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpgrade(UpgradeDto upgrade) {
    this.upgrade = upgrade;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeRecipeDto upgradeRecipe = (UpgradeRecipeDto) o;
    return Objects.equals(this.id, upgradeRecipe.id) &&
        Objects.equals(this.materials, upgradeRecipe.materials) &&
        Objects.equals(this.requiredUpgrades, upgradeRecipe.requiredUpgrades) &&
        Objects.equals(this.requirement, upgradeRecipe.requirement) &&
        Objects.equals(this.upgrade, upgradeRecipe.upgrade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, materials, requiredUpgrades, requirement, upgrade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeRecipeDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    requiredUpgrades: ").append(toIndentedString(requiredUpgrades)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    upgrade: ").append(toIndentedString(upgrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

