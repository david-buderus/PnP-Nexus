/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CurrencyCalculationEntryDto
 */
@JsonPropertyOrder({
  CurrencyCalculationEntryDto.JSON_PROPERTY_CURRENCY,
  CurrencyCalculationEntryDto.JSON_PROPERTY_CURRENCY_SHORT_FORM,
  CurrencyCalculationEntryDto.JSON_PROPERTY_FACTOR
})
@JsonTypeName("CurrencyCalculationEntry")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class CurrencyCalculationEntryDto {
  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_CURRENCY_SHORT_FORM = "currencyShortForm";
  private String currencyShortForm;

  public static final String JSON_PROPERTY_FACTOR = "factor";
  private Integer factor;

  public CurrencyCalculationEntryDto() {
  }

  public CurrencyCalculationEntryDto currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CurrencyCalculationEntryDto currencyShortForm(String currencyShortForm) {
    
    this.currencyShortForm = currencyShortForm;
    return this;
  }

   /**
   * Get currencyShortForm
   * @return currencyShortForm
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY_SHORT_FORM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyShortForm() {
    return currencyShortForm;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_SHORT_FORM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyShortForm(String currencyShortForm) {
    this.currencyShortForm = currencyShortForm;
  }


  public CurrencyCalculationEntryDto factor(Integer factor) {
    
    this.factor = factor;
    return this;
  }

   /**
   * Get factor
   * @return factor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFactor() {
    return factor;
  }


  @JsonProperty(JSON_PROPERTY_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactor(Integer factor) {
    this.factor = factor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyCalculationEntryDto currencyCalculationEntry = (CurrencyCalculationEntryDto) o;
    return Objects.equals(this.currency, currencyCalculationEntry.currency) &&
        Objects.equals(this.currencyShortForm, currencyCalculationEntry.currencyShortForm) &&
        Objects.equals(this.factor, currencyCalculationEntry.factor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, currencyShortForm, factor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyCalculationEntryDto {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyShortForm: ").append(toIndentedString(currencyShortForm)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

