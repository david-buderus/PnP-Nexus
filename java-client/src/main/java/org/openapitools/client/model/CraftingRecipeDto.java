/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CraftingRecipeMaterialsInnerDto;
import org.openapitools.client.model.ItemRecipeEntryDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CraftingRecipeDto
 */
@JsonPropertyOrder({
  CraftingRecipeDto.JSON_PROPERTY_ID,
  CraftingRecipeDto.JSON_PROPERTY_MATERIALS,
  CraftingRecipeDto.JSON_PROPERTY_OTHER_CIRCUMSTANCES,
  CraftingRecipeDto.JSON_PROPERTY_PRODUCT,
  CraftingRecipeDto.JSON_PROPERTY_PROFESSION,
  CraftingRecipeDto.JSON_PROPERTY_REQUIREMENT,
  CraftingRecipeDto.JSON_PROPERTY_SIDE_PRODUCT
})
@JsonTypeName("CraftingRecipe")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class CraftingRecipeDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_MATERIALS = "materials";
  private List<CraftingRecipeMaterialsInnerDto> materials = new ArrayList<>();

  public static final String JSON_PROPERTY_OTHER_CIRCUMSTANCES = "otherCircumstances";
  private String otherCircumstances;

  public static final String JSON_PROPERTY_PRODUCT = "product";
  private ItemRecipeEntryDto product;

  public static final String JSON_PROPERTY_PROFESSION = "profession";
  private String profession;

  public static final String JSON_PROPERTY_REQUIREMENT = "requirement";
  private String requirement;

  public static final String JSON_PROPERTY_SIDE_PRODUCT = "sideProduct";
  private ItemRecipeEntryDto sideProduct;

  public CraftingRecipeDto() {
  }

  public CraftingRecipeDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public CraftingRecipeDto materials(List<CraftingRecipeMaterialsInnerDto> materials) {
    
    this.materials = materials;
    return this;
  }

  public CraftingRecipeDto addMaterialsItem(CraftingRecipeMaterialsInnerDto materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

   /**
   * Get materials
   * @return materials
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CraftingRecipeMaterialsInnerDto> getMaterials() {
    return materials;
  }


  @JsonProperty(JSON_PROPERTY_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaterials(List<CraftingRecipeMaterialsInnerDto> materials) {
    this.materials = materials;
  }


  public CraftingRecipeDto otherCircumstances(String otherCircumstances) {
    
    this.otherCircumstances = otherCircumstances;
    return this;
  }

   /**
   * Get otherCircumstances
   * @return otherCircumstances
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OTHER_CIRCUMSTANCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOtherCircumstances() {
    return otherCircumstances;
  }


  @JsonProperty(JSON_PROPERTY_OTHER_CIRCUMSTANCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOtherCircumstances(String otherCircumstances) {
    this.otherCircumstances = otherCircumstances;
  }


  public CraftingRecipeDto product(ItemRecipeEntryDto product) {
    
    this.product = product;
    return this;
  }

   /**
   * Get product
   * @return product
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ItemRecipeEntryDto getProduct() {
    return product;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProduct(ItemRecipeEntryDto product) {
    this.product = product;
  }


  public CraftingRecipeDto profession(String profession) {
    
    this.profession = profession;
    return this;
  }

   /**
   * Get profession
   * @return profession
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROFESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProfession() {
    return profession;
  }


  @JsonProperty(JSON_PROPERTY_PROFESSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProfession(String profession) {
    this.profession = profession;
  }


  public CraftingRecipeDto requirement(String requirement) {
    
    this.requirement = requirement;
    return this;
  }

   /**
   * Get requirement
   * @return requirement
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRequirement() {
    return requirement;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequirement(String requirement) {
    this.requirement = requirement;
  }


  public CraftingRecipeDto sideProduct(ItemRecipeEntryDto sideProduct) {
    
    this.sideProduct = sideProduct;
    return this;
  }

   /**
   * Get sideProduct
   * @return sideProduct
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDE_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ItemRecipeEntryDto getSideProduct() {
    return sideProduct;
  }


  @JsonProperty(JSON_PROPERTY_SIDE_PRODUCT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSideProduct(ItemRecipeEntryDto sideProduct) {
    this.sideProduct = sideProduct;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CraftingRecipeDto craftingRecipe = (CraftingRecipeDto) o;
    return Objects.equals(this.id, craftingRecipe.id) &&
        Objects.equals(this.materials, craftingRecipe.materials) &&
        Objects.equals(this.otherCircumstances, craftingRecipe.otherCircumstances) &&
        Objects.equals(this.product, craftingRecipe.product) &&
        Objects.equals(this.profession, craftingRecipe.profession) &&
        Objects.equals(this.requirement, craftingRecipe.requirement) &&
        Objects.equals(this.sideProduct, craftingRecipe.sideProduct);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, materials, otherCircumstances, product, profession, requirement, sideProduct);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CraftingRecipeDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    otherCircumstances: ").append(toIndentedString(otherCircumstances)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    profession: ").append(toIndentedString(profession)).append("\n");
    sb.append("    requirement: ").append(toIndentedString(requirement)).append("\n");
    sb.append("    sideProduct: ").append(toIndentedString(sideProduct)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

