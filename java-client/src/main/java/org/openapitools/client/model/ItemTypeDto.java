/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ItemTypeDto
 */
@JsonPropertyOrder({
  ItemTypeDto.JSON_PROPERTY_ID,
  ItemTypeDto.JSON_PROPERTY_NAME,
  ItemTypeDto.JSON_PROPERTY_TYPE_RESTRICTION
})
@JsonTypeName("ItemType")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class ItemTypeDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Gets or Sets typeRestriction
   */
  public enum TypeRestrictionEnum {
    ITEM("ITEM"),
    
    EQUIPMENT("EQUIPMENT"),
    
    JEWELLERY("JEWELLERY"),
    
    WEAPON("WEAPON"),
    
    DEFENSIVE_ITEM("DEFENSIVE_ITEM"),
    
    SHIELD("SHIELD"),
    
    HANDHELD("HANDHELD"),
    
    ARMOR("ARMOR");

    private String value;

    TypeRestrictionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeRestrictionEnum fromValue(String value) {
      for (TypeRestrictionEnum b : TypeRestrictionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_RESTRICTION = "typeRestriction";
  private TypeRestrictionEnum typeRestriction;

  public ItemTypeDto() {
  }

  public ItemTypeDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ItemTypeDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ItemTypeDto typeRestriction(TypeRestrictionEnum typeRestriction) {
    
    this.typeRestriction = typeRestriction;
    return this;
  }

   /**
   * Get typeRestriction
   * @return typeRestriction
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE_RESTRICTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeRestrictionEnum getTypeRestriction() {
    return typeRestriction;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_RESTRICTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTypeRestriction(TypeRestrictionEnum typeRestriction) {
    this.typeRestriction = typeRestriction;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemTypeDto itemType = (ItemTypeDto) o;
    return Objects.equals(this.id, itemType.id) &&
        Objects.equals(this.name, itemType.name) &&
        Objects.equals(this.typeRestriction, itemType.typeRestriction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, typeRestriction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemTypeDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeRestriction: ").append(toIndentedString(typeRestriction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

