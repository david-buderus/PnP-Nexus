/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.MaterialDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ArmorAllOfDto
 */
@JsonPropertyOrder({
  ArmorAllOfDto.JSON_PROPERTY_ARMOR,
  ArmorAllOfDto.JSON_PROPERTY_MATERIAL,
  ArmorAllOfDto.JSON_PROPERTY_UPGRADE_SLOTS,
  ArmorAllOfDto.JSON_PROPERTY_WEIGHT
})
@JsonTypeName("Armor_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-30T12:56:25.947710400+01:00[Europe/Berlin]")
public class ArmorAllOfDto {
  public static final String JSON_PROPERTY_ARMOR = "armor";
  private Integer armor;

  public static final String JSON_PROPERTY_MATERIAL = "material";
  private MaterialDto material;

  public static final String JSON_PROPERTY_UPGRADE_SLOTS = "upgradeSlots";
  private Integer upgradeSlots;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Float weight;

  public ArmorAllOfDto() {
  }

  public ArmorAllOfDto armor(Integer armor) {
    
    this.armor = armor;
    return this;
  }

   /**
   * Get armor
   * @return armor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARMOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getArmor() {
    return armor;
  }


  @JsonProperty(JSON_PROPERTY_ARMOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArmor(Integer armor) {
    this.armor = armor;
  }


  public ArmorAllOfDto material(MaterialDto material) {
    
    this.material = material;
    return this;
  }

   /**
   * Get material
   * @return material
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MATERIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaterialDto getMaterial() {
    return material;
  }


  @JsonProperty(JSON_PROPERTY_MATERIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaterial(MaterialDto material) {
    this.material = material;
  }


  public ArmorAllOfDto upgradeSlots(Integer upgradeSlots) {
    
    this.upgradeSlots = upgradeSlots;
    return this;
  }

   /**
   * Get upgradeSlots
   * @return upgradeSlots
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPGRADE_SLOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUpgradeSlots() {
    return upgradeSlots;
  }


  @JsonProperty(JSON_PROPERTY_UPGRADE_SLOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpgradeSlots(Integer upgradeSlots) {
    this.upgradeSlots = upgradeSlots;
  }


  public ArmorAllOfDto weight(Float weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(Float weight) {
    this.weight = weight;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArmorAllOfDto armorAllOf = (ArmorAllOfDto) o;
    return Objects.equals(this.armor, armorAllOf.armor) &&
        Objects.equals(this.material, armorAllOf.material) &&
        Objects.equals(this.upgradeSlots, armorAllOf.upgradeSlots) &&
        Objects.equals(this.weight, armorAllOf.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(armor, material, upgradeSlots, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArmorAllOfDto {\n");
    sb.append("    armor: ").append(toIndentedString(armor)).append("\n");
    sb.append("    material: ").append(toIndentedString(material)).append("\n");
    sb.append("    upgradeSlots: ").append(toIndentedString(upgradeSlots)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

