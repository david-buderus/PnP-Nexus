/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Armor
 */
export interface Armor {
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'effect'?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof Armor
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'rarity'?: ArmorRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof Armor
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Armor
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'armor'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Armor
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'weight'?: number;
}

export const ArmorRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ArmorRarityEnum = typeof ArmorRarityEnum[keyof typeof ArmorRarityEnum];

/**
 * 
 * @export
 * @interface ArmorAllOf
 */
export interface ArmorAllOf {
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'armor'?: number;
    /**
     * 
     * @type {Material}
     * @memberof ArmorAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface DefensiveEquipment
 */
export interface DefensiveEquipment {
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'amount'?: number;
    /**
     * 
     * @type {IDefensiveItem}
     * @memberof DefensiveEquipment
     */
    'item'?: IDefensiveItem;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'stackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'initiative'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'maxArmor'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'maxDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'relativeDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof DefensiveEquipment
     */
    'upgrades'?: Array<Upgrade>;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipment
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface DefensiveEquipmentAllOf
 */
export interface DefensiveEquipmentAllOf {
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {IDefensiveItem}
     * @memberof DefensiveEquipmentAllOf
     */
    'item'?: IDefensiveItem;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'maxArmor'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'maxDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'relativeDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof DefensiveEquipmentAllOf
     */
    'upgrades'?: Array<Upgrade>;
    /**
     * 
     * @type {number}
     * @memberof DefensiveEquipmentAllOf
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'amount'?: number;
    /**
     * 
     * @type {IEquipableItem}
     * @memberof Equipment
     */
    'item'?: IEquipableItem;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'stackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof Equipment
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof Equipment
     */
    'upgrades'?: Array<Upgrade>;
}
/**
 * 
 * @export
 * @interface EquipmentAllOf
 */
export interface EquipmentAllOf {
    /**
     * 
     * @type {IEquipableItem}
     * @memberof EquipmentAllOf
     */
    'item'?: IEquipableItem;
    /**
     * 
     * @type {number}
     * @memberof EquipmentAllOf
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof EquipmentAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof EquipmentAllOf
     */
    'upgrades'?: Array<Upgrade>;
}
/**
 * @type GetItem1200Response
 * @export
 */
export type GetItem1200Response = Armor | Item | Jewellery | Shield | Weapon;

/**
 * 
 * @export
 * @interface IDefensiveItem
 */
export interface IDefensiveItem {
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'armor'?: number;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'effect'?: string;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'rarity'?: IDefensiveItemRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof IDefensiveItem
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof IDefensiveItem
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof IDefensiveItem
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof IDefensiveItem
     */
    'weight'?: number;
}

export const IDefensiveItemRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type IDefensiveItemRarityEnum = typeof IDefensiveItemRarityEnum[keyof typeof IDefensiveItemRarityEnum];

/**
 * 
 * @export
 * @interface IEquipableItem
 */
export interface IEquipableItem {
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'effect'?: string;
    /**
     * 
     * @type {number}
     * @memberof IEquipableItem
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof IEquipableItem
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'rarity'?: IEquipableItemRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof IEquipableItem
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof IEquipableItem
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IEquipableItem
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof IEquipableItem
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IEquipableItem
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof IEquipableItem
     */
    'vendorPrice'?: number;
}

export const IEquipableItemRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type IEquipableItemRarityEnum = typeof IEquipableItemRarityEnum[keyof typeof IEquipableItemRarityEnum];

/**
 * 
 * @export
 * @interface IOffensiveItem
 */
export interface IOffensiveItem {
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'damage'?: number;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'dice'?: string;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'effect'?: string;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'initiative'?: number;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'rarity'?: IOffensiveItemRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof IOffensiveItem
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof IOffensiveItem
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof IOffensiveItem
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof IOffensiveItem
     */
    'vendorPrice'?: number;
}

export const IOffensiveItemRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type IOffensiveItemRarityEnum = typeof IOffensiveItemRarityEnum[keyof typeof IOffensiveItemRarityEnum];

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'effect'?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof Item
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'rarity'?: ItemRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof Item
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Item
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'vendorPrice'?: number;
}

export const ItemRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ItemRarityEnum = typeof ItemRarityEnum[keyof typeof ItemRarityEnum];

/**
 * @type ItemStack200Response
 * @export
 */
export type ItemStack200Response = DefensiveEquipment | Equipment | ItemStackItem | WeaponEquipment;

/**
 * 
 * @export
 * @interface ItemStackItem
 */
export interface ItemStackItem {
    /**
     * 
     * @type {number}
     * @memberof ItemStackItem
     */
    'amount'?: number;
    /**
     * 
     * @type {GetItem1200Response}
     * @memberof ItemStackItem
     */
    'item'?: GetItem1200Response;
    /**
     * 
     * @type {number}
     * @memberof ItemStackItem
     */
    'stackSize'?: number;
}
/**
 * 
 * @export
 * @interface ItemType
 */
export interface ItemType {
    /**
     * 
     * @type {ObjectId}
     * @memberof ItemType
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    'typeRestriction'?: ItemTypeTypeRestrictionEnum;
}

export const ItemTypeTypeRestrictionEnum = {
    Item: 'ITEM',
    Equipment: 'EQUIPMENT',
    Jewellery: 'JEWELLERY',
    Weapon: 'WEAPON',
    Armor: 'ARMOR',
    Shield: 'SHIELD'
} as const;

export type ItemTypeTypeRestrictionEnum = typeof ItemTypeTypeRestrictionEnum[keyof typeof ItemTypeTypeRestrictionEnum];

/**
 * 
 * @export
 * @interface Jewellery
 */
export interface Jewellery {
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'effect'?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof Jewellery
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'rarity'?: JewelleryRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof Jewellery
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Jewellery
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Jewellery
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'upgradeSlots'?: number;
}

export const JewelleryRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type JewelleryRarityEnum = typeof JewelleryRarityEnum[keyof typeof JewelleryRarityEnum];

/**
 * 
 * @export
 * @interface JewelleryAllOf
 */
export interface JewelleryAllOf {
    /**
     * 
     * @type {Material}
     * @memberof JewelleryAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof JewelleryAllOf
     */
    'upgradeSlots'?: number;
}
/**
 * 
 * @export
 * @interface Material
 */
export interface Material {
    /**
     * 
     * @type {ObjectId}
     * @memberof Material
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Material
     */
    'items'?: Array<Item>;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ObjectId
 */
export interface ObjectId {
    /**
     * 
     * @type {string}
     * @memberof ObjectId
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof ObjectId
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface Shield
 */
export interface Shield {
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'effect'?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof Shield
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'rarity'?: ShieldRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof Shield
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Shield
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Shield
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'weight'?: number;
}

export const ShieldRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ShieldRarityEnum = typeof ShieldRarityEnum[keyof typeof ShieldRarityEnum];

/**
 * 
 * @export
 * @interface ShieldAllOf
 */
export interface ShieldAllOf {
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof ShieldAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface Upgrade
 */
export interface Upgrade {
    /**
     * 
     * @type {Array<UpgradeEffect>}
     * @memberof Upgrade
     */
    'effects'?: Array<UpgradeEffect>;
    /**
     * 
     * @type {ObjectId}
     * @memberof Upgrade
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {string}
     * @memberof Upgrade
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Upgrade
     */
    'slots'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Upgrade
     */
    'target'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Upgrade
     */
    'vendorPrice'?: number;
}
/**
 * 
 * @export
 * @interface UpgradeEffect
 */
export interface UpgradeEffect {
    /**
     * 
     * @type {string}
     * @memberof UpgradeEffect
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Weapon
 */
export interface Weapon {
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'effect'?: string;
    /**
     * 
     * @type {ObjectId}
     * @memberof Weapon
     */
    'id'?: ObjectId;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'rarity'?: WeaponRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'requirement'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof Weapon
     */
    'subtype'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Weapon
     */
    'type'?: ItemType;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'damage'?: number;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'dice'?: string;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Weapon
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'upgradeSlots'?: number;
}

export const WeaponRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type WeaponRarityEnum = typeof WeaponRarityEnum[keyof typeof WeaponRarityEnum];

/**
 * 
 * @export
 * @interface WeaponAllOf
 */
export interface WeaponAllOf {
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'damage'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeaponAllOf
     */
    'dice'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof WeaponAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'upgradeSlots'?: number;
}
/**
 * 
 * @export
 * @interface WeaponEquipment
 */
export interface WeaponEquipment {
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'amount'?: number;
    /**
     * 
     * @type {IOffensiveItem}
     * @memberof WeaponEquipment
     */
    'item'?: IOffensiveItem;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'stackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'damage'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'initiative'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'maxDamage'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'maxDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'relativeDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipment
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof WeaponEquipment
     */
    'upgrades'?: Array<Upgrade>;
}
/**
 * 
 * @export
 * @interface WeaponEquipmentAllOf
 */
export interface WeaponEquipmentAllOf {
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'damage'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {IOffensiveItem}
     * @memberof WeaponEquipmentAllOf
     */
    'item'?: IOffensiveItem;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'maxDamage'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'maxDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'relativeDurability'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'remainingUpgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponEquipmentAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof WeaponEquipmentAllOf
     */
    'upgrades'?: Array<Upgrade>;
}

/**
 * ItemServiceApi - axios parameter creator
 * @export
 */
export const ItemServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: async (universe: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getItem', 'universe', universe)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getItem', 'name', name)
            const localVarPath = `/{universe}/item/{name}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem1: async (universe: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getItem1', 'universe', universe)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getItem1', 'name', name)
            const localVarPath = `/{universe}/a/{name}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemStack: async (universe: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('itemStack', 'universe', universe)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('itemStack', 'name', name)
            const localVarPath = `/{universe}/itemstack/{name}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemServiceApi - functional programming interface
 * @export
 */
export const ItemServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(universe: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItem1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(universe, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem1(universe: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItem1200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem1(universe, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemStack(universe: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemStack200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemStack(universe, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemServiceApi - factory interface
 * @export
 */
export const ItemServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(universe: string, name: string, options?: any): AxiosPromise<GetItem1200Response> {
            return localVarFp.getItem(universe, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an item
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem1(universe: string, name: string, options?: any): AxiosPromise<GetItem1200Response> {
            return localVarFp.getItem1(universe, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} universe 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemStack(universe: string, name: string, options?: any): AxiosPromise<ItemStack200Response> {
            return localVarFp.itemStack(universe, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemServiceApi - object-oriented interface
 * @export
 * @class ItemServiceApi
 * @extends {BaseAPI}
 */
export class ItemServiceApi extends BaseAPI {
    /**
     * 
     * @summary Get an item
     * @param {string} universe 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public getItem(universe: string, name: string, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).getItem(universe, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an item
     * @param {string} universe 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public getItem1(universe: string, name: string, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).getItem1(universe, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} universe 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public itemStack(universe: string, name: string, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).itemStack(universe, name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PageServiceApi - axios parameter creator
 * @export
 */
export const PageServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (destination: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destination' is not null or undefined
            assertParamExists('getPage', 'destination', destination)
            const localVarPath = `/{destination}`
                .replace(`{${"destination"}}`, encodeURIComponent(String(destination)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageServiceApi - functional programming interface
 * @export
 */
export const PageServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(destination: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(destination, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageServiceApi - factory interface
 * @export
 */
export const PageServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(destination: string, options?: any): AxiosPromise<string> {
            return localVarFp.getPage(destination, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageServiceApi - object-oriented interface
 * @export
 * @class PageServiceApi
 * @extends {BaseAPI}
 */
export class PageServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} destination 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public getPage(destination: string, options?: AxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).getPage(destination, options).then((request) => request(this.axios, this.basePath));
    }
}


