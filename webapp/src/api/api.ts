/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdditiveUpgradeEffect
 */
export interface AdditiveUpgradeEffect {
    /**
     * 
     * @type {string}
     * @memberof AdditiveUpgradeEffect
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AdditiveUpgradeEffect
     */
    'upgradeManipulator'?: AdditiveUpgradeEffectUpgradeManipulatorEnum;
    /**
     * 
     * @type {number}
     * @memberof AdditiveUpgradeEffect
     */
    'value'?: number;
}

export const AdditiveUpgradeEffectUpgradeManipulatorEnum = {
    None: 'NONE',
    Slots: 'SLOTS',
    Damage: 'DAMAGE',
    Hit: 'HIT',
    Initiative: 'INITIATIVE',
    Armor: 'ARMOR',
    Weight: 'WEIGHT'
} as const;

export type AdditiveUpgradeEffectUpgradeManipulatorEnum = typeof AdditiveUpgradeEffectUpgradeManipulatorEnum[keyof typeof AdditiveUpgradeEffectUpgradeManipulatorEnum];

/**
 * 
 * @export
 * @interface AdditiveUpgradeEffectAllOf
 */
export interface AdditiveUpgradeEffectAllOf {
    /**
     * 
     * @type {number}
     * @memberof AdditiveUpgradeEffectAllOf
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface Armor
 */
export interface Armor {
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'rarity'?: ArmorRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Armor
     */
    'requirement': string;
    /**
     * 
     * @type {ItemType}
     * @memberof Armor
     */
    'subtype': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Armor
     */
    'type': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'armor'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Armor
     */
    'material': Material;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof Armor
     */
    'weight'?: number;
}

export const ArmorRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ArmorRarityEnum = typeof ArmorRarityEnum[keyof typeof ArmorRarityEnum];

/**
 * 
 * @export
 * @interface ArmorAllOf
 */
export interface ArmorAllOf {
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'armor'?: number;
    /**
     * 
     * @type {Material}
     * @memberof ArmorAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArmorAllOf
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface CharacterResourceRecipeEntry
 */
export interface CharacterResourceRecipeEntry {
    /**
     * 
     * @type {number}
     * @memberof CharacterResourceRecipeEntry
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {string}
     * @memberof CharacterResourceRecipeEntry
     */
    'resource'?: CharacterResourceRecipeEntryResourceEnum;
}

export const CharacterResourceRecipeEntryResourceEnum = {
    Health: 'HEALTH',
    Mana: 'MANA',
    MentalHealth: 'MENTAL_HEALTH'
} as const;

export type CharacterResourceRecipeEntryResourceEnum = typeof CharacterResourceRecipeEntryResourceEnum[keyof typeof CharacterResourceRecipeEntryResourceEnum];

/**
 * 
 * @export
 * @interface CharacterResourceRecipeEntryAllOf
 */
export interface CharacterResourceRecipeEntryAllOf {
    /**
     * 
     * @type {number}
     * @memberof CharacterResourceRecipeEntryAllOf
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {string}
     * @memberof CharacterResourceRecipeEntryAllOf
     */
    'resource'?: CharacterResourceRecipeEntryAllOfResourceEnum;
}

export const CharacterResourceRecipeEntryAllOfResourceEnum = {
    Health: 'HEALTH',
    Mana: 'MANA',
    MentalHealth: 'MENTAL_HEALTH'
} as const;

export type CharacterResourceRecipeEntryAllOfResourceEnum = typeof CharacterResourceRecipeEntryAllOfResourceEnum[keyof typeof CharacterResourceRecipeEntryAllOfResourceEnum];

/**
 * 
 * @export
 * @interface CraftingRecipe
 */
export interface CraftingRecipe {
    /**
     * 
     * @type {string}
     * @memberof CraftingRecipe
     */
    'id'?: string;
    /**
     * 
     * @type {Array<CraftingRecipeMaterialsInner>}
     * @memberof CraftingRecipe
     */
    'materials': Array<CraftingRecipeMaterialsInner>;
    /**
     * 
     * @type {string}
     * @memberof CraftingRecipe
     */
    'otherCircumstances': string;
    /**
     * 
     * @type {ItemRecipeEntry}
     * @memberof CraftingRecipe
     */
    'product': ItemRecipeEntry;
    /**
     * 
     * @type {string}
     * @memberof CraftingRecipe
     */
    'profession': string;
    /**
     * 
     * @type {string}
     * @memberof CraftingRecipe
     */
    'requirement': string;
    /**
     * 
     * @type {ItemRecipeEntry}
     * @memberof CraftingRecipe
     */
    'sideProduct'?: ItemRecipeEntry;
}
/**
 * @type CraftingRecipeMaterialsInner
 * @export
 */
export type CraftingRecipeMaterialsInner = CharacterResourceRecipeEntry | ItemRecipeEntry | MaterialRecipeEntry;

/**
 * @type GetAll8200ResponseInner
 * @export
 */
export type GetAll8200ResponseInner = Armor | Item | Jewellery | Shield | Weapon;

/**
 * @type GetPermissions200ResponseInner
 * @export
 */
export type GetPermissions200ResponseInner = GrantedUniverseAuthorityDTO | RoleAuthorityDTO;

/**
 * 
 * @export
 * @interface GrantedUniverseAuthorityDTO
 */
export interface GrantedUniverseAuthorityDTO {
    /**
     * 
     * @type {string}
     * @memberof GrantedUniverseAuthorityDTO
     */
    'permission': string;
    /**
     * 
     * @type {string}
     * @memberof GrantedUniverseAuthorityDTO
     */
    'universe': string;
}
/**
 * 
 * @export
 * @interface GrantedUniverseAuthorityDTOAllOf
 */
export interface GrantedUniverseAuthorityDTOAllOf {
    /**
     * 
     * @type {string}
     * @memberof GrantedUniverseAuthorityDTOAllOf
     */
    'permission'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantedUniverseAuthorityDTOAllOf
     */
    'universe'?: string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'rarity'?: ItemRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'requirement': string;
    /**
     * 
     * @type {ItemType}
     * @memberof Item
     */
    'subtype': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Item
     */
    'type': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'vendorPrice'?: number;
}

export const ItemRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ItemRarityEnum = typeof ItemRarityEnum[keyof typeof ItemRarityEnum];

/**
 * 
 * @export
 * @interface ItemRecipeEntry
 */
export interface ItemRecipeEntry {
    /**
     * 
     * @type {number}
     * @memberof ItemRecipeEntry
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {GetAll8200ResponseInner}
     * @memberof ItemRecipeEntry
     */
    'item': GetAll8200ResponseInner;
}
/**
 * 
 * @export
 * @interface ItemRecipeEntryAllOf
 */
export interface ItemRecipeEntryAllOf {
    /**
     * 
     * @type {number}
     * @memberof ItemRecipeEntryAllOf
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {GetAll8200ResponseInner}
     * @memberof ItemRecipeEntryAllOf
     */
    'item'?: GetAll8200ResponseInner;
}
/**
 * 
 * @export
 * @interface ItemType
 */
export interface ItemType {
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    'typeRestriction'?: ItemTypeTypeRestrictionEnum;
}

export const ItemTypeTypeRestrictionEnum = {
    Item: 'ITEM',
    Equipment: 'EQUIPMENT',
    Jewellery: 'JEWELLERY',
    Weapon: 'WEAPON',
    DefensiveItem: 'DEFENSIVE_ITEM',
    Shield: 'SHIELD',
    Handheld: 'HANDHELD',
    Armor: 'ARMOR'
} as const;

export type ItemTypeTypeRestrictionEnum = typeof ItemTypeTypeRestrictionEnum[keyof typeof ItemTypeTypeRestrictionEnum];

/**
 * 
 * @export
 * @interface ItemTypeTranslation
 */
export interface ItemTypeTranslation {
    /**
     * 
     * @type {Set<ItemType>}
     * @memberof ItemTypeTranslation
     */
    'broaderVariants'?: Set<ItemType>;
    /**
     * 
     * @type {string}
     * @memberof ItemTypeTranslation
     */
    'id'?: string;
    /**
     * 
     * @type {ItemType}
     * @memberof ItemTypeTranslation
     */
    'type'?: ItemType;
}
/**
 * 
 * @export
 * @interface Jewellery
 */
export interface Jewellery {
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'rarity'?: JewelleryRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Jewellery
     */
    'requirement': string;
    /**
     * 
     * @type {ItemType}
     * @memberof Jewellery
     */
    'subtype': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Jewellery
     */
    'type': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Jewellery
     */
    'material': Material;
    /**
     * 
     * @type {number}
     * @memberof Jewellery
     */
    'upgradeSlots'?: number;
}

export const JewelleryRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type JewelleryRarityEnum = typeof JewelleryRarityEnum[keyof typeof JewelleryRarityEnum];

/**
 * 
 * @export
 * @interface JewelleryAllOf
 */
export interface JewelleryAllOf {
    /**
     * 
     * @type {Material}
     * @memberof JewelleryAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof JewelleryAllOf
     */
    'upgradeSlots'?: number;
}
/**
 * 
 * @export
 * @interface Material
 */
export interface Material {
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'id'?: string;
    /**
     * 
     * @type {Array<MaterialItem>}
     * @memberof Material
     */
    'items': Array<MaterialItem>;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MaterialItem
 */
export interface MaterialItem {
    /**
     * 
     * @type {number}
     * @memberof MaterialItem
     */
    'amount'?: number;
    /**
     * 
     * @type {GetAll8200ResponseInner}
     * @memberof MaterialItem
     */
    'item': GetAll8200ResponseInner;
}
/**
 * 
 * @export
 * @interface MaterialRecipeEntry
 */
export interface MaterialRecipeEntry {
    /**
     * 
     * @type {number}
     * @memberof MaterialRecipeEntry
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {Material}
     * @memberof MaterialRecipeEntry
     */
    'material': Material;
}
/**
 * 
 * @export
 * @interface MaterialRecipeEntryAllOf
 */
export interface MaterialRecipeEntryAllOf {
    /**
     * 
     * @type {number}
     * @memberof MaterialRecipeEntryAllOf
     */
    'amountOfRequiredUnits'?: number;
    /**
     * 
     * @type {Material}
     * @memberof MaterialRecipeEntryAllOf
     */
    'material'?: Material;
}
/**
 * 
 * @export
 * @interface MultiplicativeUpgradeEffect
 */
export interface MultiplicativeUpgradeEffect {
    /**
     * 
     * @type {string}
     * @memberof MultiplicativeUpgradeEffect
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MultiplicativeUpgradeEffect
     */
    'upgradeManipulator'?: MultiplicativeUpgradeEffectUpgradeManipulatorEnum;
    /**
     * 
     * @type {number}
     * @memberof MultiplicativeUpgradeEffect
     */
    'factor'?: number;
}

export const MultiplicativeUpgradeEffectUpgradeManipulatorEnum = {
    None: 'NONE',
    Slots: 'SLOTS',
    Damage: 'DAMAGE',
    Hit: 'HIT',
    Initiative: 'INITIATIVE',
    Armor: 'ARMOR',
    Weight: 'WEIGHT'
} as const;

export type MultiplicativeUpgradeEffectUpgradeManipulatorEnum = typeof MultiplicativeUpgradeEffectUpgradeManipulatorEnum[keyof typeof MultiplicativeUpgradeEffectUpgradeManipulatorEnum];

/**
 * 
 * @export
 * @interface MultiplicativeUpgradeEffectAllOf
 */
export interface MultiplicativeUpgradeEffectAllOf {
    /**
     * 
     * @type {number}
     * @memberof MultiplicativeUpgradeEffectAllOf
     */
    'factor'?: number;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'newPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'oldPassword'?: string;
}
/**
 * 
 * @export
 * @interface PnPUser
 */
export interface PnPUser {
    /**
     * 
     * @type {string}
     * @memberof PnPUser
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PnPUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PnPUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface PnPUserCreation
 */
export interface PnPUserCreation {
    /**
     * 
     * @type {Array<GetPermissions200ResponseInner>}
     * @memberof PnPUserCreation
     */
    'authorities': Array<GetPermissions200ResponseInner>;
    /**
     * 
     * @type {string}
     * @memberof PnPUserCreation
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof PnPUserCreation
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PnPUserCreation
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof PnPUserCreation
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface PrimaryAttribute
 */
export interface PrimaryAttribute {
    /**
     * 
     * @type {string}
     * @memberof PrimaryAttribute
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrimaryAttribute
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PrimaryAttribute
     */
    'shortName': string;
}
/**
 * 
 * @export
 * @interface PrimaryAttributeDependency
 */
export interface PrimaryAttributeDependency {
    /**
     * 
     * @type {number}
     * @memberof PrimaryAttributeDependency
     */
    'factor'?: number;
    /**
     * 
     * @type {PrimaryAttribute}
     * @memberof PrimaryAttributeDependency
     */
    'primaryAttribute': PrimaryAttribute;
}
/**
 * 
 * @export
 * @interface RoleAuthorityDTO
 */
export interface RoleAuthorityDTO {
    /**
     * 
     * @type {string}
     * @memberof RoleAuthorityDTO
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface RoleAuthorityDTOAllOf
 */
export interface RoleAuthorityDTOAllOf {
    /**
     * 
     * @type {string}
     * @memberof RoleAuthorityDTOAllOf
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface SecondaryAttribute
 */
export interface SecondaryAttribute {
    /**
     * 
     * @type {boolean}
     * @memberof SecondaryAttribute
     */
    'consumable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SecondaryAttribute
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SecondaryAttribute
     */
    'name': string;
    /**
     * 
     * @type {Array<PrimaryAttributeDependency>}
     * @memberof SecondaryAttribute
     */
    'primaryAttributeDependencies': Array<PrimaryAttributeDependency>;
}
/**
 * 
 * @export
 * @interface Shield
 */
export interface Shield {
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'rarity'?: ShieldRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Shield
     */
    'requirement': string;
    /**
     * 
     * @type {ItemType}
     * @memberof Shield
     */
    'subtype': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Shield
     */
    'type': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Shield
     */
    'material': Material;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shield
     */
    'weight'?: number;
}

export const ShieldRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type ShieldRarityEnum = typeof ShieldRarityEnum[keyof typeof ShieldRarityEnum];

/**
 * 
 * @export
 * @interface ShieldAllOf
 */
export interface ShieldAllOf {
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'armor'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof ShieldAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'upgradeSlots'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShieldAllOf
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface SimpleUpgradeEffect
 */
export interface SimpleUpgradeEffect {
    /**
     * 
     * @type {string}
     * @memberof SimpleUpgradeEffect
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleUpgradeEffect
     */
    'upgradeManipulator'?: SimpleUpgradeEffectUpgradeManipulatorEnum;
}

export const SimpleUpgradeEffectUpgradeManipulatorEnum = {
    None: 'NONE',
    Slots: 'SLOTS',
    Damage: 'DAMAGE',
    Hit: 'HIT',
    Initiative: 'INITIATIVE',
    Armor: 'ARMOR',
    Weight: 'WEIGHT'
} as const;

export type SimpleUpgradeEffectUpgradeManipulatorEnum = typeof SimpleUpgradeEffectUpgradeManipulatorEnum[keyof typeof SimpleUpgradeEffectUpgradeManipulatorEnum];

/**
 * 
 * @export
 * @interface Spell
 */
export interface Spell {
    /**
     * 
     * @type {string}
     * @memberof Spell
     */
    'castTime': string;
    /**
     * 
     * @type {string}
     * @memberof Spell
     */
    'cost': string;
    /**
     * 
     * @type {string}
     * @memberof Spell
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Spell
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Spell
     */
    'name': string;
    /**
     * 
     * @type {Array<Talent>}
     * @memberof Spell
     */
    'talents': Array<Talent>;
    /**
     * 
     * @type {number}
     * @memberof Spell
     */
    'tier'?: number;
}
/**
 * 
 * @export
 * @interface Talent
 */
export interface Talent {
    /**
     * 
     * @type {PrimaryAttribute}
     * @memberof Talent
     */
    'firstAttribute': PrimaryAttribute;
    /**
     * 
     * @type {string}
     * @memberof Talent
     */
    'group': string;
    /**
     * 
     * @type {string}
     * @memberof Talent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Talent
     */
    'name': string;
    /**
     * 
     * @type {PrimaryAttribute}
     * @memberof Talent
     */
    'secondAttribute': PrimaryAttribute;
    /**
     * 
     * @type {PrimaryAttribute}
     * @memberof Talent
     */
    'thirdAttribute': PrimaryAttribute;
}
/**
 * 
 * @export
 * @interface Universe
 */
export interface Universe {
    /**
     * 
     * @type {string}
     * @memberof Universe
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof Universe
     */
    'name': string;
    /**
     * 
     * @type {UniverseSettings}
     * @memberof Universe
     */
    'settings'?: UniverseSettings;
}
/**
 * 
 * @export
 * @interface UniverseSettings
 */
export interface UniverseSettings {
    /**
     * 
     * @type {number}
     * @memberof UniverseSettings
     */
    'wearFactor'?: number;
}
/**
 * 
 * @export
 * @interface Upgrade
 */
export interface Upgrade {
    /**
     * 
     * @type {Array<UpgradeEffectsInner>}
     * @memberof Upgrade
     */
    'effects': Array<UpgradeEffectsInner>;
    /**
     * 
     * @type {string}
     * @memberof Upgrade
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Upgrade
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Upgrade
     */
    'slots'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Upgrade
     */
    'target': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Upgrade
     */
    'vendorPrice'?: number;
}
/**
 * 
 * @export
 * @interface UpgradeEffect
 */
export interface UpgradeEffect {
    /**
     * 
     * @type {string}
     * @memberof UpgradeEffect
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof UpgradeEffect
     */
    'upgradeManipulator'?: UpgradeEffectUpgradeManipulatorEnum;
}

export const UpgradeEffectUpgradeManipulatorEnum = {
    None: 'NONE',
    Slots: 'SLOTS',
    Damage: 'DAMAGE',
    Hit: 'HIT',
    Initiative: 'INITIATIVE',
    Armor: 'ARMOR',
    Weight: 'WEIGHT'
} as const;

export type UpgradeEffectUpgradeManipulatorEnum = typeof UpgradeEffectUpgradeManipulatorEnum[keyof typeof UpgradeEffectUpgradeManipulatorEnum];

/**
 * @type UpgradeEffectsInner
 * @export
 */
export type UpgradeEffectsInner = AdditiveUpgradeEffect | MultiplicativeUpgradeEffect | SimpleUpgradeEffect;

/**
 * 
 * @export
 * @interface UpgradeRecipe
 */
export interface UpgradeRecipe {
    /**
     * 
     * @type {string}
     * @memberof UpgradeRecipe
     */
    'id'?: string;
    /**
     * 
     * @type {Array<CraftingRecipeMaterialsInner>}
     * @memberof UpgradeRecipe
     */
    'materials': Array<CraftingRecipeMaterialsInner>;
    /**
     * 
     * @type {Array<Upgrade>}
     * @memberof UpgradeRecipe
     */
    'requiredUpgrades': Array<Upgrade>;
    /**
     * 
     * @type {string}
     * @memberof UpgradeRecipe
     */
    'requirement': string;
    /**
     * 
     * @type {Upgrade}
     * @memberof UpgradeRecipe
     */
    'upgrade': Upgrade;
}
/**
 * 
 * @export
 * @interface Weapon
 */
export interface Weapon {
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'maximumStackSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'minimumStackSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'rarity'?: WeaponRarityEnum;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'requirement': string;
    /**
     * 
     * @type {ItemType}
     * @memberof Weapon
     */
    'subtype': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'tier'?: number;
    /**
     * 
     * @type {ItemType}
     * @memberof Weapon
     */
    'type': ItemType;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'vendorPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'damage'?: number;
    /**
     * 
     * @type {string}
     * @memberof Weapon
     */
    'dice': string;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof Weapon
     */
    'material': Material;
    /**
     * 
     * @type {number}
     * @memberof Weapon
     */
    'upgradeSlots'?: number;
}

export const WeaponRarityEnum = {
    Unknown: 'UNKNOWN',
    Common: 'COMMON',
    Rare: 'RARE',
    Epic: 'EPIC',
    Legendary: 'LEGENDARY',
    Godlike: 'GODLIKE'
} as const;

export type WeaponRarityEnum = typeof WeaponRarityEnum[keyof typeof WeaponRarityEnum];

/**
 * 
 * @export
 * @interface WeaponAllOf
 */
export interface WeaponAllOf {
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'damage'?: number;
    /**
     * 
     * @type {string}
     * @memberof WeaponAllOf
     */
    'dice'?: string;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'hit'?: number;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'initiative'?: number;
    /**
     * 
     * @type {Material}
     * @memberof WeaponAllOf
     */
    'material'?: Material;
    /**
     * 
     * @type {number}
     * @memberof WeaponAllOf
     */
    'upgradeSlots'?: number;
}

/**
 * CraftingRecipeServiceApi - axios parameter creator
 * @export
 */
export const CraftingRecipeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete5', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete5', 'id', id)
            const localVarPath = `/{universe}/crafting-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll5: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll5', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll5', 'ids', ids)
            const localVarPath = `/{universe}/crafting-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get5: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get5', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get5', 'id', id)
            const localVarPath = `/{universe}/crafting-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll5: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll5', 'universe', universe)
            const localVarPath = `/{universe}/crafting-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<CraftingRecipe>} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll5: async (universe: string, craftingRecipe: Array<CraftingRecipe>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll5', 'universe', universe)
            // verify required parameter 'craftingRecipe' is not null or undefined
            assertParamExists('insertAll5', 'craftingRecipe', craftingRecipe)
            const localVarPath = `/{universe}/crafting-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(craftingRecipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {CraftingRecipe} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5: async (universe: string, id: string, craftingRecipe: CraftingRecipe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update5', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update5', 'id', id)
            // verify required parameter 'craftingRecipe' is not null or undefined
            assertParamExists('update5', 'craftingRecipe', craftingRecipe)
            const localVarPath = `/{universe}/crafting-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(craftingRecipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CraftingRecipeServiceApi - functional programming interface
 * @export
 */
export const CraftingRecipeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CraftingRecipeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete5(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete5(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll5(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll5(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get5(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CraftingRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get5(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll5(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CraftingRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll5(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<CraftingRecipe>} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll5(universe: string, craftingRecipe: Array<CraftingRecipe>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CraftingRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll5(universe, craftingRecipe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {CraftingRecipe} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update5(universe: string, id: string, craftingRecipe: CraftingRecipe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CraftingRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update5(universe, id, craftingRecipe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CraftingRecipeServiceApi - factory interface
 * @export
 */
export const CraftingRecipeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CraftingRecipeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete5(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete5(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll5(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll5(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get5(universe: string, id: string, options?: any): AxiosPromise<CraftingRecipe> {
            return localVarFp.get5(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll5(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<CraftingRecipe>> {
            return localVarFp.getAll5(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<CraftingRecipe>} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll5(universe: string, craftingRecipe: Array<CraftingRecipe>, options?: any): AxiosPromise<Array<CraftingRecipe>> {
            return localVarFp.insertAll5(universe, craftingRecipe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {CraftingRecipe} craftingRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update5(universe: string, id: string, craftingRecipe: CraftingRecipe, options?: any): AxiosPromise<CraftingRecipe> {
            return localVarFp.update5(universe, id, craftingRecipe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CraftingRecipeServiceApi - object-oriented interface
 * @export
 * @class CraftingRecipeServiceApi
 * @extends {BaseAPI}
 */
export class CraftingRecipeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public delete5(universe: string, id: string, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).delete5(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public deleteAll5(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).deleteAll5(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public get5(universe: string, id: string, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).get5(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public getAll5(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).getAll5(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<CraftingRecipe>} craftingRecipe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public insertAll5(universe: string, craftingRecipe: Array<CraftingRecipe>, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).insertAll5(universe, craftingRecipe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {CraftingRecipe} craftingRecipe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingRecipeServiceApi
     */
    public update5(universe: string, id: string, craftingRecipe: CraftingRecipe, options?: AxiosRequestConfig) {
        return CraftingRecipeServiceApiFp(this.configuration).update5(universe, id, craftingRecipe, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemServiceApi - axios parameter creator
 * @export
 */
export const ItemServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete8: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete8', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete8', 'id', id)
            const localVarPath = `/api/{universe}/items/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll8: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll8', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll8', 'ids', ids)
            const localVarPath = `/api/{universe}/items`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get8: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get8', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get8', 'id', id)
            const localVarPath = `/api/{universe}/items/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll8: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll8', 'universe', universe)
            const localVarPath = `/api/{universe}/items`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<GetAll8200ResponseInner>} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll8: async (universe: string, getAll8200ResponseInner: Array<GetAll8200ResponseInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll8', 'universe', universe)
            // verify required parameter 'getAll8200ResponseInner' is not null or undefined
            assertParamExists('insertAll8', 'getAll8200ResponseInner', getAll8200ResponseInner)
            const localVarPath = `/api/{universe}/items`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAll8200ResponseInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {GetAll8200ResponseInner} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update8: async (universe: string, id: string, getAll8200ResponseInner: GetAll8200ResponseInner, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update8', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update8', 'id', id)
            // verify required parameter 'getAll8200ResponseInner' is not null or undefined
            assertParamExists('update8', 'getAll8200ResponseInner', getAll8200ResponseInner)
            const localVarPath = `/api/{universe}/items/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAll8200ResponseInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemServiceApi - functional programming interface
 * @export
 */
export const ItemServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete8(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete8(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll8(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll8(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get8(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAll8200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get8(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll8(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAll8200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll8(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<GetAll8200ResponseInner>} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll8(universe: string, getAll8200ResponseInner: Array<GetAll8200ResponseInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAll8200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll8(universe, getAll8200ResponseInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {GetAll8200ResponseInner} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update8(universe: string, id: string, getAll8200ResponseInner: GetAll8200ResponseInner, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAll8200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update8(universe, id, getAll8200ResponseInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemServiceApi - factory interface
 * @export
 */
export const ItemServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete8(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete8(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll8(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll8(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get8(universe: string, id: string, options?: any): AxiosPromise<GetAll8200ResponseInner> {
            return localVarFp.get8(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll8(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<GetAll8200ResponseInner>> {
            return localVarFp.getAll8(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<GetAll8200ResponseInner>} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll8(universe: string, getAll8200ResponseInner: Array<GetAll8200ResponseInner>, options?: any): AxiosPromise<Array<GetAll8200ResponseInner>> {
            return localVarFp.insertAll8(universe, getAll8200ResponseInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {GetAll8200ResponseInner} getAll8200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update8(universe: string, id: string, getAll8200ResponseInner: GetAll8200ResponseInner, options?: any): AxiosPromise<GetAll8200ResponseInner> {
            return localVarFp.update8(universe, id, getAll8200ResponseInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemServiceApi - object-oriented interface
 * @export
 * @class ItemServiceApi
 * @extends {BaseAPI}
 */
export class ItemServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public delete8(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).delete8(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public deleteAll8(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).deleteAll8(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public get8(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).get8(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public getAll8(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).getAll8(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<GetAll8200ResponseInner>} getAll8200ResponseInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public insertAll8(universe: string, getAll8200ResponseInner: Array<GetAll8200ResponseInner>, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).insertAll8(universe, getAll8200ResponseInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {GetAll8200ResponseInner} getAll8200ResponseInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemServiceApi
     */
    public update8(universe: string, id: string, getAll8200ResponseInner: GetAll8200ResponseInner, options?: AxiosRequestConfig) {
        return ItemServiceApiFp(this.configuration).update8(universe, id, getAll8200ResponseInner, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemTypeServiceApi - axios parameter creator
 * @export
 */
export const ItemTypeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete9: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete9', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete9', 'id', id)
            const localVarPath = `/api/{universe}/item-types/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll9: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll9', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll9', 'ids', ids)
            const localVarPath = `/api/{universe}/item-types`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get9: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get9', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get9', 'id', id)
            const localVarPath = `/api/{universe}/item-types/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll9: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll9', 'universe', universe)
            const localVarPath = `/api/{universe}/item-types`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemType>} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll9: async (universe: string, itemType: Array<ItemType>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll9', 'universe', universe)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('insertAll9', 'itemType', itemType)
            const localVarPath = `/api/{universe}/item-types`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemType} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update9: async (universe: string, id: string, itemType: ItemType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update9', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update9', 'id', id)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('update9', 'itemType', itemType)
            const localVarPath = `/api/{universe}/item-types/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemTypeServiceApi - functional programming interface
 * @export
 */
export const ItemTypeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemTypeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete9(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete9(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll9(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll9(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get9(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get9(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll9(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll9(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemType>} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll9(universe: string, itemType: Array<ItemType>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll9(universe, itemType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemType} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update9(universe: string, id: string, itemType: ItemType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update9(universe, id, itemType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemTypeServiceApi - factory interface
 * @export
 */
export const ItemTypeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemTypeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete9(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete9(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll9(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll9(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get9(universe: string, id: string, options?: any): AxiosPromise<ItemType> {
            return localVarFp.get9(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll9(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<ItemType>> {
            return localVarFp.getAll9(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemType>} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll9(universe: string, itemType: Array<ItemType>, options?: any): AxiosPromise<Array<ItemType>> {
            return localVarFp.insertAll9(universe, itemType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemType} itemType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update9(universe: string, id: string, itemType: ItemType, options?: any): AxiosPromise<ItemType> {
            return localVarFp.update9(universe, id, itemType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemTypeServiceApi - object-oriented interface
 * @export
 * @class ItemTypeServiceApi
 * @extends {BaseAPI}
 */
export class ItemTypeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public delete9(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).delete9(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public deleteAll9(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).deleteAll9(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public get9(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).get9(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public getAll9(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).getAll9(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<ItemType>} itemType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public insertAll9(universe: string, itemType: Array<ItemType>, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).insertAll9(universe, itemType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {ItemType} itemType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeServiceApi
     */
    public update9(universe: string, id: string, itemType: ItemType, options?: AxiosRequestConfig) {
        return ItemTypeServiceApiFp(this.configuration).update9(universe, id, itemType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemTypeTranslationServiceApi - axios parameter creator
 * @export
 */
export const ItemTypeTranslationServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete10: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete10', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete10', 'id', id)
            const localVarPath = `/api/{universe}/item-type-translations/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll10: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll10', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll10', 'ids', ids)
            const localVarPath = `/api/{universe}/item-type-translations`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get10: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get10', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get10', 'id', id)
            const localVarPath = `/api/{universe}/item-type-translations/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll10: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll10', 'universe', universe)
            const localVarPath = `/api/{universe}/item-type-translations`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemTypeTranslation>} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll10: async (universe: string, itemTypeTranslation: Array<ItemTypeTranslation>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll10', 'universe', universe)
            // verify required parameter 'itemTypeTranslation' is not null or undefined
            assertParamExists('insertAll10', 'itemTypeTranslation', itemTypeTranslation)
            const localVarPath = `/api/{universe}/item-type-translations`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemTypeTranslation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemTypeTranslation} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update10: async (universe: string, id: string, itemTypeTranslation: ItemTypeTranslation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update10', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update10', 'id', id)
            // verify required parameter 'itemTypeTranslation' is not null or undefined
            assertParamExists('update10', 'itemTypeTranslation', itemTypeTranslation)
            const localVarPath = `/api/{universe}/item-type-translations/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemTypeTranslation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemTypeTranslationServiceApi - functional programming interface
 * @export
 */
export const ItemTypeTranslationServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemTypeTranslationServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete10(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete10(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll10(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll10(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get10(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemTypeTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get10(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll10(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemTypeTranslation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll10(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemTypeTranslation>} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll10(universe: string, itemTypeTranslation: Array<ItemTypeTranslation>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemTypeTranslation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll10(universe, itemTypeTranslation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemTypeTranslation} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update10(universe: string, id: string, itemTypeTranslation: ItemTypeTranslation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemTypeTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update10(universe, id, itemTypeTranslation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemTypeTranslationServiceApi - factory interface
 * @export
 */
export const ItemTypeTranslationServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemTypeTranslationServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete10(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete10(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll10(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll10(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get10(universe: string, id: string, options?: any): AxiosPromise<ItemTypeTranslation> {
            return localVarFp.get10(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll10(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<ItemTypeTranslation>> {
            return localVarFp.getAll10(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<ItemTypeTranslation>} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll10(universe: string, itemTypeTranslation: Array<ItemTypeTranslation>, options?: any): AxiosPromise<Array<ItemTypeTranslation>> {
            return localVarFp.insertAll10(universe, itemTypeTranslation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {ItemTypeTranslation} itemTypeTranslation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update10(universe: string, id: string, itemTypeTranslation: ItemTypeTranslation, options?: any): AxiosPromise<ItemTypeTranslation> {
            return localVarFp.update10(universe, id, itemTypeTranslation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemTypeTranslationServiceApi - object-oriented interface
 * @export
 * @class ItemTypeTranslationServiceApi
 * @extends {BaseAPI}
 */
export class ItemTypeTranslationServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public delete10(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).delete10(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public deleteAll10(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).deleteAll10(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public get10(universe: string, id: string, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).get10(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public getAll10(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).getAll10(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<ItemTypeTranslation>} itemTypeTranslation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public insertAll10(universe: string, itemTypeTranslation: Array<ItemTypeTranslation>, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).insertAll10(universe, itemTypeTranslation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {ItemTypeTranslation} itemTypeTranslation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemTypeTranslationServiceApi
     */
    public update10(universe: string, id: string, itemTypeTranslation: ItemTypeTranslation, options?: AxiosRequestConfig) {
        return ItemTypeTranslationServiceApiFp(this.configuration).update10(universe, id, itemTypeTranslation, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MaterialServiceApi - axios parameter creator
 * @export
 */
export const MaterialServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete4', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete4', 'id', id)
            const localVarPath = `/{universe}/materials/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll4: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll4', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll4', 'ids', ids)
            const localVarPath = `/{universe}/materials`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get4: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get4', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get4', 'id', id)
            const localVarPath = `/{universe}/materials/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll4: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll4', 'universe', universe)
            const localVarPath = `/{universe}/materials`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Material>} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll4: async (universe: string, material: Array<Material>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll4', 'universe', universe)
            // verify required parameter 'material' is not null or undefined
            assertParamExists('insertAll4', 'material', material)
            const localVarPath = `/{universe}/materials`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(material, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (universe: string, id: string, material: Material, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update4', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update4', 'id', id)
            // verify required parameter 'material' is not null or undefined
            assertParamExists('update4', 'material', material)
            const localVarPath = `/{universe}/materials/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(material, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaterialServiceApi - functional programming interface
 * @export
 */
export const MaterialServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaterialServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete4(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete4(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll4(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll4(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get4(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Material>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get4(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll4(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Material>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll4(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Material>} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll4(universe: string, material: Array<Material>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Material>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll4(universe, material, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(universe: string, id: string, material: Material, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Material>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update4(universe, id, material, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MaterialServiceApi - factory interface
 * @export
 */
export const MaterialServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaterialServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete4(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete4(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll4(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll4(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get4(universe: string, id: string, options?: any): AxiosPromise<Material> {
            return localVarFp.get4(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll4(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<Material>> {
            return localVarFp.getAll4(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Material>} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll4(universe: string, material: Array<Material>, options?: any): AxiosPromise<Array<Material>> {
            return localVarFp.insertAll4(universe, material, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Material} material 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4(universe: string, id: string, material: Material, options?: any): AxiosPromise<Material> {
            return localVarFp.update4(universe, id, material, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MaterialServiceApi - object-oriented interface
 * @export
 * @class MaterialServiceApi
 * @extends {BaseAPI}
 */
export class MaterialServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public delete4(universe: string, id: string, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).delete4(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public deleteAll4(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).deleteAll4(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public get4(universe: string, id: string, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).get4(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public getAll4(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).getAll4(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<Material>} material 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public insertAll4(universe: string, material: Array<Material>, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).insertAll4(universe, material, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {Material} material 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialServiceApi
     */
    public update4(universe: string, id: string, material: Material, options?: AxiosRequestConfig) {
        return MaterialServiceApiFp(this.configuration).update4(universe, id, material, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PageServiceApi - axios parameter creator
 * @export
 */
export const PageServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (destination: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destination' is not null or undefined
            assertParamExists('getPage', 'destination', destination)
            const localVarPath = `/{destination}`
                .replace(`{${"destination"}}`, encodeURIComponent(String(destination)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageServiceApi - functional programming interface
 * @export
 */
export const PageServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(destination: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(destination, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageServiceApi - factory interface
 * @export
 */
export const PageServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} destination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(destination: string, options?: any): AxiosPromise<string> {
            return localVarFp.getPage(destination, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageServiceApi - object-oriented interface
 * @export
 * @class PageServiceApi
 * @extends {BaseAPI}
 */
export class PageServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} destination 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public getPage(destination: string, options?: AxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).getPage(destination, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PrimaryAttributeServiceApi - axios parameter creator
 * @export
 */
export const PrimaryAttributeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete3', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete3', 'id', id)
            const localVarPath = `/{universe}/primary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll3: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll3', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll3', 'ids', ids)
            const localVarPath = `/{universe}/primary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get3: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get3', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get3', 'id', id)
            const localVarPath = `/{universe}/primary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll3: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll3', 'universe', universe)
            const localVarPath = `/{universe}/primary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<PrimaryAttribute>} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll3: async (universe: string, primaryAttribute: Array<PrimaryAttribute>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll3', 'universe', universe)
            // verify required parameter 'primaryAttribute' is not null or undefined
            assertParamExists('insertAll3', 'primaryAttribute', primaryAttribute)
            const localVarPath = `/{universe}/primary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(primaryAttribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {PrimaryAttribute} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (universe: string, id: string, primaryAttribute: PrimaryAttribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update3', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update3', 'id', id)
            // verify required parameter 'primaryAttribute' is not null or undefined
            assertParamExists('update3', 'primaryAttribute', primaryAttribute)
            const localVarPath = `/{universe}/primary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(primaryAttribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrimaryAttributeServiceApi - functional programming interface
 * @export
 */
export const PrimaryAttributeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrimaryAttributeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete3(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete3(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll3(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll3(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get3(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get3(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll3(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimaryAttribute>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll3(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<PrimaryAttribute>} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll3(universe: string, primaryAttribute: Array<PrimaryAttribute>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimaryAttribute>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll3(universe, primaryAttribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {PrimaryAttribute} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(universe: string, id: string, primaryAttribute: PrimaryAttribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update3(universe, id, primaryAttribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrimaryAttributeServiceApi - factory interface
 * @export
 */
export const PrimaryAttributeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrimaryAttributeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete3(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete3(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll3(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll3(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get3(universe: string, id: string, options?: any): AxiosPromise<PrimaryAttribute> {
            return localVarFp.get3(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll3(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<PrimaryAttribute>> {
            return localVarFp.getAll3(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<PrimaryAttribute>} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll3(universe: string, primaryAttribute: Array<PrimaryAttribute>, options?: any): AxiosPromise<Array<PrimaryAttribute>> {
            return localVarFp.insertAll3(universe, primaryAttribute, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {PrimaryAttribute} primaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3(universe: string, id: string, primaryAttribute: PrimaryAttribute, options?: any): AxiosPromise<PrimaryAttribute> {
            return localVarFp.update3(universe, id, primaryAttribute, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrimaryAttributeServiceApi - object-oriented interface
 * @export
 * @class PrimaryAttributeServiceApi
 * @extends {BaseAPI}
 */
export class PrimaryAttributeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public delete3(universe: string, id: string, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).delete3(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public deleteAll3(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).deleteAll3(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public get3(universe: string, id: string, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).get3(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public getAll3(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).getAll3(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<PrimaryAttribute>} primaryAttribute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public insertAll3(universe: string, primaryAttribute: Array<PrimaryAttribute>, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).insertAll3(universe, primaryAttribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {PrimaryAttribute} primaryAttribute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrimaryAttributeServiceApi
     */
    public update3(universe: string, id: string, primaryAttribute: PrimaryAttribute, options?: AxiosRequestConfig) {
        return PrimaryAttributeServiceApiFp(this.configuration).update3(universe, id, primaryAttribute, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecondaryAttributeServiceApi - axios parameter creator
 * @export
 */
export const SecondaryAttributeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete2', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete2', 'id', id)
            const localVarPath = `/{universe}/secondary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll2: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll2', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll2', 'ids', ids)
            const localVarPath = `/{universe}/secondary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get2: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get2', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get2', 'id', id)
            const localVarPath = `/{universe}/secondary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll2', 'universe', universe)
            const localVarPath = `/{universe}/secondary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<SecondaryAttribute>} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll2: async (universe: string, secondaryAttribute: Array<SecondaryAttribute>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll2', 'universe', universe)
            // verify required parameter 'secondaryAttribute' is not null or undefined
            assertParamExists('insertAll2', 'secondaryAttribute', secondaryAttribute)
            const localVarPath = `/{universe}/secondary-attributes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(secondaryAttribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {SecondaryAttribute} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (universe: string, id: string, secondaryAttribute: SecondaryAttribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update2', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update2', 'id', id)
            // verify required parameter 'secondaryAttribute' is not null or undefined
            assertParamExists('update2', 'secondaryAttribute', secondaryAttribute)
            const localVarPath = `/{universe}/secondary-attributes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(secondaryAttribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecondaryAttributeServiceApi - functional programming interface
 * @export
 */
export const SecondaryAttributeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecondaryAttributeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll2(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll2(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get2(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get2(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll2(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecondaryAttribute>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll2(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<SecondaryAttribute>} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll2(universe: string, secondaryAttribute: Array<SecondaryAttribute>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecondaryAttribute>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll2(universe, secondaryAttribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {SecondaryAttribute} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(universe: string, id: string, secondaryAttribute: SecondaryAttribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(universe, id, secondaryAttribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecondaryAttributeServiceApi - factory interface
 * @export
 */
export const SecondaryAttributeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecondaryAttributeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete2(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll2(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll2(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get2(universe: string, id: string, options?: any): AxiosPromise<SecondaryAttribute> {
            return localVarFp.get2(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<SecondaryAttribute>> {
            return localVarFp.getAll2(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<SecondaryAttribute>} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll2(universe: string, secondaryAttribute: Array<SecondaryAttribute>, options?: any): AxiosPromise<Array<SecondaryAttribute>> {
            return localVarFp.insertAll2(universe, secondaryAttribute, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {SecondaryAttribute} secondaryAttribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(universe: string, id: string, secondaryAttribute: SecondaryAttribute, options?: any): AxiosPromise<SecondaryAttribute> {
            return localVarFp.update2(universe, id, secondaryAttribute, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecondaryAttributeServiceApi - object-oriented interface
 * @export
 * @class SecondaryAttributeServiceApi
 * @extends {BaseAPI}
 */
export class SecondaryAttributeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public delete2(universe: string, id: string, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).delete2(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public deleteAll2(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).deleteAll2(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public get2(universe: string, id: string, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).get2(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public getAll2(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).getAll2(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<SecondaryAttribute>} secondaryAttribute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public insertAll2(universe: string, secondaryAttribute: Array<SecondaryAttribute>, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).insertAll2(universe, secondaryAttribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {SecondaryAttribute} secondaryAttribute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecondaryAttributeServiceApi
     */
    public update2(universe: string, id: string, secondaryAttribute: SecondaryAttribute, options?: AxiosRequestConfig) {
        return SecondaryAttributeServiceApiFp(this.configuration).update2(universe, id, secondaryAttribute, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SpellServiceApi - axios parameter creator
 * @export
 */
export const SpellServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete1', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete1', 'id', id)
            const localVarPath = `/{universe}/spells/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll1: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll1', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll1', 'ids', ids)
            const localVarPath = `/{universe}/spells`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get1', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get1', 'id', id)
            const localVarPath = `/{universe}/spells/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll1', 'universe', universe)
            const localVarPath = `/{universe}/spells`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Spell>} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll1: async (universe: string, spell: Array<Spell>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll1', 'universe', universe)
            // verify required parameter 'spell' is not null or undefined
            assertParamExists('insertAll1', 'spell', spell)
            const localVarPath = `/{universe}/spells`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spell, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Spell} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (universe: string, id: string, spell: Spell, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update1', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update1', 'id', id)
            // verify required parameter 'spell' is not null or undefined
            assertParamExists('update1', 'spell', spell)
            const localVarPath = `/{universe}/spells/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spell, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpellServiceApi - functional programming interface
 * @export
 */
export const SpellServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpellServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll1(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll1(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get1(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spell>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get1(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll1(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Spell>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll1(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Spell>} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll1(universe: string, spell: Array<Spell>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Spell>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll1(universe, spell, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Spell} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(universe: string, id: string, spell: Spell, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Spell>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(universe, id, spell, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpellServiceApi - factory interface
 * @export
 */
export const SpellServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpellServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete1(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll1(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll1(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get1(universe: string, id: string, options?: any): AxiosPromise<Spell> {
            return localVarFp.get1(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<Spell>> {
            return localVarFp.getAll1(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Spell>} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll1(universe: string, spell: Array<Spell>, options?: any): AxiosPromise<Array<Spell>> {
            return localVarFp.insertAll1(universe, spell, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Spell} spell 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(universe: string, id: string, spell: Spell, options?: any): AxiosPromise<Spell> {
            return localVarFp.update1(universe, id, spell, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpellServiceApi - object-oriented interface
 * @export
 * @class SpellServiceApi
 * @extends {BaseAPI}
 */
export class SpellServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public delete1(universe: string, id: string, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).delete1(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public deleteAll1(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).deleteAll1(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public get1(universe: string, id: string, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).get1(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public getAll1(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).getAll1(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<Spell>} spell 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public insertAll1(universe: string, spell: Array<Spell>, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).insertAll1(universe, spell, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {Spell} spell 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpellServiceApi
     */
    public update1(universe: string, id: string, spell: Spell, options?: AxiosRequestConfig) {
        return SpellServiceApiFp(this.configuration).update1(universe, id, spell, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TalentServiceApi - axios parameter creator
 * @export
 */
export const TalentServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('_delete', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/{universe}/talents/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll', 'ids', ids)
            const localVarPath = `/{universe}/talents`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/{universe}/talents/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll', 'universe', universe)
            const localVarPath = `/{universe}/talents`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Talent>} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll: async (universe: string, talent: Array<Talent>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll', 'universe', universe)
            // verify required parameter 'talent' is not null or undefined
            assertParamExists('insertAll', 'talent', talent)
            const localVarPath = `/{universe}/talents`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(talent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Talent} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (universe: string, id: string, talent: Talent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'talent' is not null or undefined
            assertParamExists('update', 'talent', talent)
            const localVarPath = `/{universe}/talents/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(talent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TalentServiceApi - functional programming interface
 * @export
 */
export const TalentServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TalentServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Talent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Talent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Talent>} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll(universe: string, talent: Array<Talent>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Talent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll(universe, talent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Talent} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(universe: string, id: string, talent: Talent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Talent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(universe, id, talent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TalentServiceApi - factory interface
 * @export
 */
export const TalentServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TalentServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(universe: string, id: string, options?: any): AxiosPromise<Talent> {
            return localVarFp.get(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<Talent>> {
            return localVarFp.getAll(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Talent>} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll(universe: string, talent: Array<Talent>, options?: any): AxiosPromise<Array<Talent>> {
            return localVarFp.insertAll(universe, talent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Talent} talent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(universe: string, id: string, talent: Talent, options?: any): AxiosPromise<Talent> {
            return localVarFp.update(universe, id, talent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TalentServiceApi - object-oriented interface
 * @export
 * @class TalentServiceApi
 * @extends {BaseAPI}
 */
export class TalentServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public _delete(universe: string, id: string, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration)._delete(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public deleteAll(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration).deleteAll(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public get(universe: string, id: string, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration).get(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public getAll(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration).getAll(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<Talent>} talent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public insertAll(universe: string, talent: Array<Talent>, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration).insertAll(universe, talent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {Talent} talent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalentServiceApi
     */
    public update(universe: string, id: string, talent: Talent, options?: AxiosRequestConfig) {
        return TalentServiceApiFp(this.configuration).update(universe, id, talent, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UniverseServiceApi - axios parameter creator
 * @export
 */
export const UniverseServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add the given access right to the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {string} [accessPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermission: async (universe: string, username: string, accessPermission?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('addPermission', 'universe', universe)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('addPermission', 'username', username)
            const localVarPath = `/api/universes/{universe}/permission`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (accessPermission !== undefined) {
                localVarQueryParameter['accessPermission'] = accessPermission;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a universe
         * @param {Universe} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUniverse: async (universe: Universe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('createUniverse', 'universe', universe)
            const localVarPath = `/api/universes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(universe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUniverse: async (universe: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteUniverse', 'universe', universe)
            const localVarPath = `/api/universes/{universe}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Universes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniverses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/universes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniverse: async (universe: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getUniverse', 'universe', universe)
            const localVarPath = `/api/universes/{universe}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes all access rights to the universe from the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermission: async (universe: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('removePermission', 'universe', universe)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('removePermission', 'username', username)
            const localVarPath = `/api/universes/{universe}/permission`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a universe
         * @param {string} universe 
         * @param {Universe} universe2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUniverse: async (universe: string, universe2: Universe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('updateUniverse', 'universe', universe)
            // verify required parameter 'universe2' is not null or undefined
            assertParamExists('updateUniverse', 'universe2', universe2)
            const localVarPath = `/api/universes/{universe}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(universe2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UniverseServiceApi - functional programming interface
 * @export
 */
export const UniverseServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UniverseServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add the given access right to the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {string} [accessPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPermission(universe: string, username: string, accessPermission?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPermission(universe, username, accessPermission, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a universe
         * @param {Universe} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUniverse(universe: Universe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Universe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUniverse(universe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUniverse(universe: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUniverse(universe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Universes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUniverses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Universe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUniverses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniverse(universe: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Universe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUniverse(universe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes all access rights to the universe from the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePermission(universe: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePermission(universe, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a universe
         * @param {string} universe 
         * @param {Universe} universe2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUniverse(universe: string, universe2: Universe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Universe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUniverse(universe, universe2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UniverseServiceApi - factory interface
 * @export
 */
export const UniverseServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UniverseServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Add the given access right to the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {string} [accessPermission] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPermission(universe: string, username: string, accessPermission?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addPermission(universe, username, accessPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a universe
         * @param {Universe} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUniverse(universe: Universe, options?: any): AxiosPromise<Universe> {
            return localVarFp.createUniverse(universe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUniverse(universe: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUniverse(universe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Universes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniverses(options?: any): AxiosPromise<Array<Universe>> {
            return localVarFp.getAllUniverses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a universe
         * @param {string} universe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniverse(universe: string, options?: any): AxiosPromise<Universe> {
            return localVarFp.getUniverse(universe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes all access rights to the universe from the given user
         * @param {string} universe 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermission(universe: string, username: string, options?: any): AxiosPromise<void> {
            return localVarFp.removePermission(universe, username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a universe
         * @param {string} universe 
         * @param {Universe} universe2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUniverse(universe: string, universe2: Universe, options?: any): AxiosPromise<Universe> {
            return localVarFp.updateUniverse(universe, universe2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UniverseServiceApi - object-oriented interface
 * @export
 * @class UniverseServiceApi
 * @extends {BaseAPI}
 */
export class UniverseServiceApi extends BaseAPI {
    /**
     * 
     * @summary Add the given access right to the given user
     * @param {string} universe 
     * @param {string} username 
     * @param {string} [accessPermission] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public addPermission(universe: string, username: string, accessPermission?: string, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).addPermission(universe, username, accessPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a universe
     * @param {Universe} universe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public createUniverse(universe: Universe, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).createUniverse(universe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a universe
     * @param {string} universe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public deleteUniverse(universe: string, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).deleteUniverse(universe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Universes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public getAllUniverses(options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).getAllUniverses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a universe
     * @param {string} universe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public getUniverse(universe: string, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).getUniverse(universe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes all access rights to the universe from the given user
     * @param {string} universe 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public removePermission(universe: string, username: string, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).removePermission(universe, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a universe
     * @param {string} universe 
     * @param {Universe} universe2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UniverseServiceApi
     */
    public updateUniverse(universe: string, universe2: Universe, options?: AxiosRequestConfig) {
        return UniverseServiceApiFp(this.configuration).updateUniverse(universe, universe2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UpgradeRecipeServiceApi - axios parameter creator
 * @export
 */
export const UpgradeRecipeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete7', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete7', 'id', id)
            const localVarPath = `/api/{universe}/upgrade-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll7: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll7', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll7', 'ids', ids)
            const localVarPath = `/api/{universe}/upgrade-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get7: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get7', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get7', 'id', id)
            const localVarPath = `/api/{universe}/upgrade-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll7: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll7', 'universe', universe)
            const localVarPath = `/api/{universe}/upgrade-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<UpgradeRecipe>} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll7: async (universe: string, upgradeRecipe: Array<UpgradeRecipe>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll7', 'universe', universe)
            // verify required parameter 'upgradeRecipe' is not null or undefined
            assertParamExists('insertAll7', 'upgradeRecipe', upgradeRecipe)
            const localVarPath = `/api/{universe}/upgrade-recipes`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upgradeRecipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {UpgradeRecipe} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update7: async (universe: string, id: string, upgradeRecipe: UpgradeRecipe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update7', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update7', 'id', id)
            // verify required parameter 'upgradeRecipe' is not null or undefined
            assertParamExists('update7', 'upgradeRecipe', upgradeRecipe)
            const localVarPath = `/api/{universe}/upgrade-recipes/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upgradeRecipe, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpgradeRecipeServiceApi - functional programming interface
 * @export
 */
export const UpgradeRecipeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpgradeRecipeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete7(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete7(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll7(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll7(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get7(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpgradeRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get7(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll7(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpgradeRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll7(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<UpgradeRecipe>} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll7(universe: string, upgradeRecipe: Array<UpgradeRecipe>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpgradeRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll7(universe, upgradeRecipe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {UpgradeRecipe} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update7(universe: string, id: string, upgradeRecipe: UpgradeRecipe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpgradeRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update7(universe, id, upgradeRecipe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpgradeRecipeServiceApi - factory interface
 * @export
 */
export const UpgradeRecipeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpgradeRecipeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete7(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete7(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll7(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll7(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get7(universe: string, id: string, options?: any): AxiosPromise<UpgradeRecipe> {
            return localVarFp.get7(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll7(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<UpgradeRecipe>> {
            return localVarFp.getAll7(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<UpgradeRecipe>} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll7(universe: string, upgradeRecipe: Array<UpgradeRecipe>, options?: any): AxiosPromise<Array<UpgradeRecipe>> {
            return localVarFp.insertAll7(universe, upgradeRecipe, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {UpgradeRecipe} upgradeRecipe 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update7(universe: string, id: string, upgradeRecipe: UpgradeRecipe, options?: any): AxiosPromise<UpgradeRecipe> {
            return localVarFp.update7(universe, id, upgradeRecipe, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpgradeRecipeServiceApi - object-oriented interface
 * @export
 * @class UpgradeRecipeServiceApi
 * @extends {BaseAPI}
 */
export class UpgradeRecipeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public delete7(universe: string, id: string, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).delete7(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public deleteAll7(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).deleteAll7(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public get7(universe: string, id: string, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).get7(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public getAll7(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).getAll7(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<UpgradeRecipe>} upgradeRecipe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public insertAll7(universe: string, upgradeRecipe: Array<UpgradeRecipe>, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).insertAll7(universe, upgradeRecipe, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {UpgradeRecipe} upgradeRecipe 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeRecipeServiceApi
     */
    public update7(universe: string, id: string, upgradeRecipe: UpgradeRecipe, options?: AxiosRequestConfig) {
        return UpgradeRecipeServiceApiFp(this.configuration).update7(universe, id, upgradeRecipe, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UpgradeServiceApi - axios parameter creator
 * @export
 */
export const UpgradeServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('delete6', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete6', 'id', id)
            const localVarPath = `/api/{universe}/upgrades/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll6: async (universe: string, ids: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('deleteAll6', 'universe', universe)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('deleteAll6', 'ids', ids)
            const localVarPath = `/api/{universe}/upgrades`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get6: async (universe: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('get6', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get6', 'id', id)
            const localVarPath = `/api/{universe}/upgrades/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll6: async (universe: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('getAll6', 'universe', universe)
            const localVarPath = `/api/{universe}/upgrades`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Upgrade>} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll6: async (universe: string, upgrade: Array<Upgrade>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('insertAll6', 'universe', universe)
            // verify required parameter 'upgrade' is not null or undefined
            assertParamExists('insertAll6', 'upgrade', upgrade)
            const localVarPath = `/api/{universe}/upgrades`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upgrade, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Upgrade} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6: async (universe: string, id: string, upgrade: Upgrade, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'universe' is not null or undefined
            assertParamExists('update6', 'universe', universe)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update6', 'id', id)
            // verify required parameter 'upgrade' is not null or undefined
            assertParamExists('update6', 'upgrade', upgrade)
            const localVarPath = `/api/{universe}/upgrades/{id}`
                .replace(`{${"universe"}}`, encodeURIComponent(String(universe)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upgrade, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpgradeServiceApi - functional programming interface
 * @export
 */
export const UpgradeServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpgradeServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete6(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete6(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAll6(universe: string, ids: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAll6(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get6(universe: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Upgrade>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get6(universe, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll6(universe: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Upgrade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll6(universe, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Upgrade>} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertAll6(universe: string, upgrade: Array<Upgrade>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Upgrade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertAll6(universe, upgrade, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Upgrade} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update6(universe: string, id: string, upgrade: Upgrade, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Upgrade>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update6(universe, id, upgrade, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpgradeServiceApi - factory interface
 * @export
 */
export const UpgradeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpgradeServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete6(universe: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.delete6(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes all objects with the given ids from the database
         * @param {string} universe 
         * @param {Array<string>} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAll6(universe: string, ids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAll6(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an object from the database
         * @param {string} universe 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get6(universe: string, id: string, options?: any): AxiosPromise<Upgrade> {
            return localVarFp.get6(universe, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all objects from the database
         * @param {string} universe 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll6(universe: string, ids?: Array<string>, options?: any): AxiosPromise<Array<Upgrade>> {
            return localVarFp.getAll6(universe, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inserts the objects into the database
         * @param {string} universe 
         * @param {Array<Upgrade>} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertAll6(universe: string, upgrade: Array<Upgrade>, options?: any): AxiosPromise<Array<Upgrade>> {
            return localVarFp.insertAll6(universe, upgrade, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object in the database
         * @param {string} universe 
         * @param {string} id 
         * @param {Upgrade} upgrade 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update6(universe: string, id: string, upgrade: Upgrade, options?: any): AxiosPromise<Upgrade> {
            return localVarFp.update6(universe, id, upgrade, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpgradeServiceApi - object-oriented interface
 * @export
 * @class UpgradeServiceApi
 * @extends {BaseAPI}
 */
export class UpgradeServiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public delete6(universe: string, id: string, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).delete6(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes all objects with the given ids from the database
     * @param {string} universe 
     * @param {Array<string>} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public deleteAll6(universe: string, ids: Array<string>, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).deleteAll6(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an object from the database
     * @param {string} universe 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public get6(universe: string, id: string, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).get6(universe, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all objects from the database
     * @param {string} universe 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public getAll6(universe: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).getAll6(universe, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inserts the objects into the database
     * @param {string} universe 
     * @param {Array<Upgrade>} upgrade 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public insertAll6(universe: string, upgrade: Array<Upgrade>, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).insertAll6(universe, upgrade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object in the database
     * @param {string} universe 
     * @param {string} id 
     * @param {Upgrade} upgrade 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpgradeServiceApi
     */
    public update6(universe: string, id: string, upgrade: Upgrade, options?: AxiosRequestConfig) {
        return UpgradeServiceApiFp(this.configuration).update6(universe, id, upgrade, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserServiceApi - axios parameter creator
 * @export
 */
export const UserServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user
         * @param {PnPUserCreation} pnPUserCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (pnPUserCreation: PnPUserCreation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pnPUserCreation' is not null or undefined
            assertParamExists('createUser', 'pnPUserCreation', pnPUserCreation)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pnPUserCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the permissions of a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissions: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getPermissions', 'username', username)
            const localVarPath = `/api/users/{username}/permissions`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUser', 'username', username)
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('removeUser', 'username', username)
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the password of a user
         * @param {string} username 
         * @param {PasswordChange} passwordChange 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (username: string, passwordChange: PasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updatePassword', 'username', username)
            // verify required parameter 'passwordChange' is not null or undefined
            assertParamExists('updatePassword', 'passwordChange', passwordChange)
            const localVarPath = `/api/users/{username}/password`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the permissions of a user
         * @param {string} username 
         * @param {Array<GetPermissions200ResponseInner>} getPermissions200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissions: async (username: string, getPermissions200ResponseInner: Array<GetPermissions200ResponseInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updatePermissions', 'username', username)
            // verify required parameter 'getPermissions200ResponseInner' is not null or undefined
            assertParamExists('updatePermissions', 'getPermissions200ResponseInner', getPermissions200ResponseInner)
            const localVarPath = `/api/users/{username}/permissions`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPermissions200ResponseInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a user
         * @param {string} username 
         * @param {PnPUser} pnPUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (username: string, pnPUser: PnPUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updateUser', 'username', username)
            // verify required parameter 'pnPUser' is not null or undefined
            assertParamExists('updateUser', 'pnPUser', pnPUser)
            const localVarPath = `/api/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pnPUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserServiceApi - functional programming interface
 * @export
 */
export const UserServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a user
         * @param {PnPUserCreation} pnPUserCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(pnPUserCreation: PnPUserCreation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(pnPUserCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the permissions of a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissions(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPermissions200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissions(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PnPUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUser(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUser(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the password of a user
         * @param {string} username 
         * @param {PasswordChange} passwordChange 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(username: string, passwordChange: PasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(username, passwordChange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the permissions of a user
         * @param {string} username 
         * @param {Array<GetPermissions200ResponseInner>} getPermissions200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePermissions(username: string, getPermissions200ResponseInner: Array<GetPermissions200ResponseInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePermissions(username, getPermissions200ResponseInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a user
         * @param {string} username 
         * @param {PnPUser} pnPUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(username: string, pnPUser: PnPUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(username, pnPUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserServiceApi - factory interface
 * @export
 */
export const UserServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a user
         * @param {PnPUserCreation} pnPUserCreation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(pnPUserCreation: PnPUserCreation, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(pnPUserCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the permissions of a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissions(username: string, options?: any): AxiosPromise<Array<GetPermissions200ResponseInner>> {
            return localVarFp.getPermissions(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(username: string, options?: any): AxiosPromise<PnPUser> {
            return localVarFp.getUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser(username: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the password of a user
         * @param {string} username 
         * @param {PasswordChange} passwordChange 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(username: string, passwordChange: PasswordChange, options?: any): AxiosPromise<void> {
            return localVarFp.updatePassword(username, passwordChange, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the permissions of a user
         * @param {string} username 
         * @param {Array<GetPermissions200ResponseInner>} getPermissions200ResponseInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissions(username: string, getPermissions200ResponseInner: Array<GetPermissions200ResponseInner>, options?: any): AxiosPromise<void> {
            return localVarFp.updatePermissions(username, getPermissions200ResponseInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a user
         * @param {string} username 
         * @param {PnPUser} pnPUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(username: string, pnPUser: PnPUser, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(username, pnPUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserServiceApi - object-oriented interface
 * @export
 * @class UserServiceApi
 * @extends {BaseAPI}
 */
export class UserServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create a user
     * @param {PnPUserCreation} pnPUserCreation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public createUser(pnPUserCreation: PnPUserCreation, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).createUser(pnPUserCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the permissions of a user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public getPermissions(username: string, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).getPermissions(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public getUser(username: string, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).getUser(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public removeUser(username: string, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).removeUser(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the password of a user
     * @param {string} username 
     * @param {PasswordChange} passwordChange 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public updatePassword(username: string, passwordChange: PasswordChange, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).updatePassword(username, passwordChange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the permissions of a user
     * @param {string} username 
     * @param {Array<GetPermissions200ResponseInner>} getPermissions200ResponseInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public updatePermissions(username: string, getPermissions200ResponseInner: Array<GetPermissions200ResponseInner>, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).updatePermissions(username, getPermissions200ResponseInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a user
     * @param {string} username 
     * @param {PnPUser} pnPUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public updateUser(username: string, pnPUser: PnPUser, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).updateUser(username, pnPUser, options).then((request) => request(this.axios, this.basePath));
    }
}


